diff --git a/arch/arm/cpu/armv8/generic_timer.c b/arch/arm/cpu/armv8/generic_timer.c
index c1706dcec1..3e3c2212c3 100644
--- a/arch/arm/cpu/armv8/generic_timer.c
+++ b/arch/arm/cpu/armv8/generic_timer.c
@@ -20,7 +20,7 @@ unsigned long get_tbclk(void)
 	return cntfrq;
 }
 
-#ifdef CONFIG_SYS_FSL_ERRATUM_A008585
+//#ifdef CONFIG_SYS_FSL_ERRATUM_A008585
 /*
  * FSL erratum A-008585 says that the ARM generic timer counter "has the
  * potential to contain an erroneous value for a small number of core
@@ -46,7 +46,7 @@ unsigned long timer_read_counter(void)
 
 	return cntpct;
 }
-#elif CONFIG_SUNXI_A64_TIMER_ERRATUM
+//#elif CONFIG_SUNXI_A64_TIMER_ERRATUM
 /*
  * This erratum sometimes flips the lower 11 bits of the counter value
  * to all 0's or all 1's, leading to jumps forwards or backwards.
@@ -59,31 +59,32 @@ unsigned long timer_read_counter(void)
  * single read, so does not have any significant overhead.
  * The algorithm was conceived by Samuel Holland.
  */
-unsigned long timer_read_counter(void)
-{
-	unsigned long cntpct;
-
-	isb();
-	do {
-		asm volatile("mrs %0, cntpct_el0" : "=r" (cntpct));
-	} while (((cntpct + 1) & GENMASK(10, 0)) <= 1);
-
-	return cntpct;
-}
-#else
+// unsigned long timer_read_counter(void)
+// {
+// 	unsigned long cntpct;
+// 
+// 	isb();
+// 	do {
+// 		asm volatile("mrs %0, cntpct_el0" : "=r" (cntpct));
+// 	} while (((cntpct + 1) & GENMASK(9, 0)) <= 1);
+// 
+// 	return cntpct;
+// }
+// 
+// #else
 /*
  * timer_read_counter() using the Arm Generic Timer (aka arch timer).
  */
-unsigned long timer_read_counter(void)
-{
-	unsigned long cntpct;
-
-	isb();
-	asm volatile("mrs %0, cntpct_el0" : "=r" (cntpct));
-
-	return cntpct;
-}
-#endif
+// unsigned long timer_read_counter(void)
+// {
+// 	unsigned long cntpct;
+// 
+// 	isb();
+// 	asm volatile("mrs %0, cntpct_el0" : "=r" (cntpct));
+// 
+// 	return cntpct;
+// }
+// #endif
 
 uint64_t get_ticks(void)
 {
