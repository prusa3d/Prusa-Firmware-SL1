diff --git a/octo-uploadd/octo-uploadd.py b/octo-uploadd/octo-uploadd.py
index 36f779f..ccee6cd 100644
--- a/octo-uploadd/octo-uploadd.py
+++ b/octo-uploadd/octo-uploadd.py
@@ -18,8 +18,7 @@ Send a HEAD request::
 Send a POST request::
     curl -d "foo=bar&bin=baz" http://localhost
 """
-from BaseHTTPServer import BaseHTTPRequestHandler, HTTPServer
-import SocketServer
+from http.server import BaseHTTPRequestHandler, HTTPServer
 import mimetypes as memetypes
 import shutil
 import cgi
@@ -74,14 +73,14 @@ class S(BaseHTTPRequestHandler):
 		print("client addr: " + str(self.client_address))
 		print(self.headers)
 		
-		content_len = int(self.headers.getheader('content-length', 0))
+		content_len = int(self.headers.get('content-length', 0))
 		post_body = self.rfile.read(content_len)
 		print(post_body)	
 		if self.path == "/api/version":
 			print("Client wants API version..")
 			
 			
-			if self.headers.getheader('x-api-key')  == API_KEY:
+			if self.headers.get('x-api-key')  == API_KEY:
 				print("Good API_KEY")
 				signature = SERVICE_SIGNATURE
 				
@@ -92,24 +91,25 @@ class S(BaseHTTPRequestHandler):
 				}
 				self.send_response(200)
 				self.send_header('Content-type', 'application/json')
-				self.wfile.write("\n" + json.dumps(txt))				
 				self.end_headers()
+				self.wfile.write(json.dumps(txt).encode())
 				print("sent")
 			else: 
 				signature = ""
 				print("Client has a wrong API-KEY")
 				self.send_response(403)
 				self.send_header('Content-type', 'text/plain')
-				self.wfile.write("\nInvalid API key")
 				self.end_headers()
+				self.wfile.write("Invalid API key".encode())
 		else:
 			print("GET - uknown request")
 			self._set_headers()
-			self.wfile.write("\n" + json.dumps(["uknown request"]))
+			self.end_headers()
+			self.wfile.write(json.dumps(["uknown request"]).encode())
 
 	def do_HEAD(self):
 		print("HEAD")
-		print(self.headers)		
+		print(self.headers)
 		self._set_headers()
   
 	def do_POST(self):
@@ -120,12 +120,12 @@ class S(BaseHTTPRequestHandler):
 		
 		if self.path == "/api/files/local":
 			print("Client wants to upload...")
-			if self.headers.getheader("x-api-key") != API_KEY:
-				print("Bad x-api-key: \"" + str( self.headers.getheader("x-api-key")) + "\" when it shold be something else(like {})".format(API_KEY))
+			if self.headers.get("x-api-key") != API_KEY:
+				print("Bad x-api-key: \"" + str( self.headers.get("x-api-key")) + "\" when it shold be something else(like {})".format(API_KEY))
 				self.send_response(403)
 				self.send_header('Content-type', 'text/plain')
-				self.wfile.write("\nInvalid API key")
 				self.end_headers()
+				self.wfile.write("Invalid API key".encode())
 				return
 			
 			form = cgi.FieldStorage(
@@ -161,12 +161,12 @@ class S(BaseHTTPRequestHandler):
 								"resource":		"http://example.com/api/files/local/{}".format(form["file"].filename),
 								"download": 	"http://example.com/downloads/files/local/{}".format(form["file"].filename)			
 							}
-						}				
+						}
 					},
 					"done": True
 				}
-				self.wfile.write("\n" + json.dumps(response))
 				self.end_headers()
+				self.wfile.write(json.dumps(response).encode())
 				return
 			else: # Not enough free space in the storage
 				# Doesn't do anything with posted datax
@@ -174,14 +174,16 @@ class S(BaseHTTPRequestHandler):
 				self.send_header('Content-type', 'text/html')
 				self.send_response(404)
 				self._set_headers()
-				self.wfile.write("\n<html><body><h1>Not enough free space on the device(there needs to be at least 10MB left after saving the file!</h1></body></html>")
+				self.end_headers()
+				self.wfile.write("<html><body><h1>Not enough free space on the device(there needs to be at least 10MB left after saving the file!</h1></body></html>".encode())
 			
 		else:	# Uknown path
 			# Doesn't do anything with posted datax
 			self.send_header('Content-type', 'text/html')
 			self.send_response(404)
 			self._set_headers()
-			self.wfile.write("\n<html><body><h1>Uknown address!</h1></body></html>")
+			self.end_headers()
+			self.wfile.write("<html><body><h1>Uknown address!</h1></body></html>".encode())
         
 def run(server_class=HTTPServer, handler_class=S, port=7999):
 	server_address = ('127.0.0.1', port)
