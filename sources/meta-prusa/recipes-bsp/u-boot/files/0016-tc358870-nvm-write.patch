From 09ad2f4983ade35ab34092c963ce85ac45a940dd Mon Sep 17 00:00:00 2001
From: Roman Beranek <roman.beranek@prusa3d.com>
Date: Thu, 11 Feb 2021 09:56:38 +0100
Subject: [PATCH] tc358870: nvm write

---
 board/sunxi/Makefile                |   1 +
 board/sunxi/board.c                 |   6 +-
 board/sunxi/panel-detector-uclass.c | 245 ++++++++++++++++++++++
 board/sunxi/panel_detector.h        |  15 ++
 board/sunxi/tc358870.c              | 308 ++++++++++++++++++++++------
 lib/vsprintf.c                      |   8 +
 6 files changed, 518 insertions(+), 65 deletions(-)

diff --git a/board/sunxi/Makefile b/board/sunxi/Makefile
index 6ec648996d..3e7ccfec07 100644
--- a/board/sunxi/Makefile
+++ b/board/sunxi/Makefile
@@ -18,6 +18,7 @@ obj-$(CONFIG_EFI_PARTITION)	+= grow_sd.o
 ifdef CONFIG_BRIDGED_PANEL_DETECTION
 obj-y	+= panel-detector-uclass.o
 obj-y	+= tc358870.o
+CFLAGS_panel-detector-uclass.o := -Wno-packed-bitfield-compat
 endif
 
 endif
diff --git a/board/sunxi/board.c b/board/sunxi/board.c
index 09cb9712ac..b8d20b30eb 100644
--- a/board/sunxi/board.c
+++ b/board/sunxi/board.c
@@ -1019,10 +1019,8 @@ int ft_board_setup(void *blob, bd_t *bd)
 	offset = fdt_node_offset_by_compatible(blob, -1, "toshiba,tc358870");
 	if (offset < 0)
 		return offset;
-	r = fdt_setprop_string(blob, offset, "panel-name", panel_detector_get_panel_name(detector));
-	r = fdt_setprop_u64(blob, offset, "match-data", panel_detector_get_match_data(detector));
-	if (r)
-		return r;
+
+	panel_detector_fill_in_fdt_node(detector, blob, offset);
 #endif
 	return 0;
 }
diff --git a/board/sunxi/panel-detector-uclass.c b/board/sunxi/panel-detector-uclass.c
index e37231e8f8..9f09caf8aa 100644
--- a/board/sunxi/panel-detector-uclass.c
+++ b/board/sunxi/panel-detector-uclass.c
@@ -5,8 +5,208 @@
  */
 
 #include <dm.h>
+#include <command.h>
+#include <vsprintf.h>
+#include <dm/device-internal.h>
 #include "panel_detector.h"
 
+typedef struct __attribute__((packed)) {
+	enum { CZP=0 } origin:4;
+	u32 sequence_number:20;
+	u8 week:6;
+	u8 year:8;
+	u16 ean_pn:10;
+} prusa_serial_number_t; /* 6 bytes */
+
+typedef union lcd_vendor_data {
+	struct __attribute__((packed)) {
+		u16 transmittance;
+		prusa_serial_number_t sn;
+	} structured;
+	u64 numeric;
+} lcd_vendor_data_t; /* 8 bytes */
+
+static enum command_ret_t handle_error(int err)
+{
+	if (err == CMD_RET_USAGE)
+		return CMD_RET_USAGE;
+
+	if (err < 0) {
+		printf("Command failed: Error %d\n", err);
+		return CMD_RET_FAILURE;
+	}
+
+	if (err == 0) {
+		printf("OK\n");
+		return CMD_RET_SUCCESS;
+	}
+
+	return CMD_RET_FAILURE;
+}
+
+static void sn_to_string(char* dst, prusa_serial_number_t const* sn) {
+	snprintf(dst, 20, "%3sX%02hhu%02hhuX%03huX%06u", "CZP",
+		 sn->week, sn->year, sn->ean_pn, sn->sequence_number);
+}
+
+static int parse_sn(prusa_serial_number_t *dst, char const* src)
+{
+	uint8_t week;
+	uint8_t year;
+	uint16_t ean;
+	uint32_t seq;
+
+	sscanf(src, "CZPX%02hhu%02hhuX%03huX%06u", &week, &year, &ean, &seq);
+
+	dst->origin = CZP;
+	dst->week = week;
+	dst->year = year;
+	dst->ean_pn = ean;
+	dst->sequence_number = seq;
+
+	char buf[20];
+	sn_to_string(buf, dst);
+	if (strncmp(src, buf, sizeof(buf)) != 0) return -EINVAL;
+	return 0;
+}
+
+static int load_vendor_data(struct udevice *dev)
+{
+	struct panel_detector_priv *uc_priv = dev_get_uclass_priv(dev);
+	int r;
+	lcd_vendor_data_t data;
+
+	r = panel_detector_read_id_from_nvm(dev, &data.numeric);
+	if (r < 0)
+		return r;
+	sn_to_string(uc_priv->sn_str, &data.structured.sn);
+	uc_priv->transmittance = data.structured.transmittance;
+
+	return 0;
+}
+
+static int do_panel_id_is_writable(struct udevice *dev)
+{
+	int ret = panel_detector_has_writable_nvm(dev);
+	if (ret == 0) {
+		printf("The ID region of the OTP has already been written to.\n");
+		return 1;
+	} else if (ret == 1) {
+		printf("The ID region of the OTP is empty and writable.\n");
+		return 0;
+	}
+	return ret;
+}
+
+static int do_panel_id_read_qword(struct udevice *dev)
+{
+	int r;
+	u64 id;
+
+	r = panel_detector_read_id_from_nvm(dev, &id);
+	if (r < 0)
+		return r;
+	printf("ID = 0x%016llx\n", id);
+	return 0;
+}
+
+static int do_panel_id_write_qword(struct udevice *dev, char * const str_id)
+{
+	u64 id = simple_strtoull(str_id, NULL, 0x10);
+	return panel_detector_write_id_to_nvm(dev, id);
+}
+
+static int do_panel_id_read_vendor_data(struct udevice *dev)
+{
+	struct panel_detector_priv *uc_priv = dev_get_uclass_priv(dev);
+	int ret;
+
+	ret = load_vendor_data(dev);
+	if (ret < 0) return ret;
+
+	int t = uc_priv->transmittance;
+	printf("SN = %s, transmittance = %d.%02d %%\n", uc_priv->sn_str, t/100, t%100);
+	return 0;
+}
+
+static int do_panel_id_write_vendor_data(struct udevice *dev, char * const sn_str,
+					 char * const transmittance_str)
+{
+	int ret;
+	lcd_vendor_data_t data;
+	ret = sscanf(transmittance_str, "%hu", &data.structured.transmittance);
+	if (ret != 1) {
+		printf("ERROR: couldn't parse TRANSMITTANCE argument\n");
+		return -EINVAL;
+	}
+	if (data.structured.transmittance > 10000) {
+		printf("ERROR: invalid transmittance value.\n");
+		return -EINVAL;
+	}
+
+	ret = parse_sn(&data.structured.sn, sn_str);
+	if (ret < 0) {
+		printf("ERROR: couldn't parse SN argument\n");
+		return ret;
+	}
+
+	return panel_detector_write_id_to_nvm(dev, data.numeric);
+}
+
+static int do_panel_id(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
+{
+	int r;
+	struct udevice *dev;
+
+	if (argc < 2)
+		return CMD_RET_USAGE;
+
+	char * const cmd = argv[1];
+	argc -= 2;
+	argv += 2;
+
+	r = uclass_first_device(UCLASS_PANEL_DETECTOR, &dev);
+	if (r < 0)
+		return handle_error(r);
+
+	if (!strcmp(cmd, "remove") && argc == 0)
+		return handle_error(device_remove(dev, DM_REMOVE_NORMAL));
+	if (!strcmp(cmd, "is_writable") && argc == 0)
+		return handle_error(do_panel_id_is_writable(dev));
+	if (!strcmp(cmd, "read") && argc == 0)
+		return handle_error(do_panel_id_read_vendor_data(dev));
+	if (!strcmp(cmd, "read_qword") && argc == 0)
+		return handle_error(do_panel_id_read_qword(dev));
+	if (!strcmp(cmd, "write") && argc == 2)
+		return handle_error(do_panel_id_write_vendor_data(dev, argv[0], argv[1]));
+	if (!strcmp(cmd, "write_qword") && argc == 1)
+		return handle_error(do_panel_id_write_qword(dev, argv[0]));
+
+	return CMD_RET_USAGE;
+}
+
+U_BOOT_CMD(
+	panel_id,	4,	1,	do_panel_id,
+	"Read/write ID stored in the OTP of an LCD panel",
+	"\nPOWER\n"
+	"panel_id remove                    Deinitialize panel and turn AVDD regulator off\n"
+	"                                   (the complementary operation (probe) happens\n"
+	"                                   automatically when a panel_id command is invoked)\n"
+	"\n"
+	"OTP\n"
+	"panel_id is_writable               Check that a panel hasn't yet been written to\n"
+	"panel_id read                      Read vendor data from the OTP\n"
+	"panel_id read_qword                Read OTP data as a 64-bit word \n"
+	"                                   (0x0020406080a0c0e0 is factory default)\n"
+	"panel_id write <sn> <x-mittance>   Write vendor data into the OTP\n"
+	"                                   SN expected as CZPX[wwyy]X[ean]X[serial]\n"
+	"                                   (i.e. CZPX1721X000X123456)\n"
+	"                                   and transmittance in units of 10^-4\n"
+	"                                   (i.e. an integer lying in the interval [0, 10000])\n"
+	"panel_id write_qword <qword>       Write a 64-bit word (number, actually) into the OTP\n"
+	""
+);
+
 const char* panel_detector_get_panel_name(struct udevice *dev)
 {
 	struct panel_detector_priv *uc_priv = dev_get_uclass_priv(dev);
@@ -19,6 +219,51 @@ u64 panel_detector_get_match_data(struct udevice *dev)
 	return uc_priv->match_data;
 }
 
+int panel_detector_has_writable_nvm(struct udevice *dev)
+{
+	struct panel_detector_ops *ops = panel_detector_get_ops(dev);
+	if (!ops->has_writable_nvm)
+		return -ENOSYS;
+	return ops->has_writable_nvm(dev);
+}
+
+int panel_detector_write_id_to_nvm(struct udevice *dev, u64 id)
+{
+	struct panel_detector_ops *ops = panel_detector_get_ops(dev);
+	if (!ops->write_id_to_nvm)
+		return -ENOSYS;
+	return ops->write_id_to_nvm(dev, id);
+}
+
+int panel_detector_read_id_from_nvm(struct udevice *dev, u64 *id)
+{
+	struct panel_detector_ops *ops = panel_detector_get_ops(dev);
+	if (!ops->read_id_from_nvm)
+		return -ENOSYS;
+	return ops->read_id_from_nvm(dev, id);
+}
+
+int panel_detector_fill_in_fdt_node(struct udevice *dev, void *blob, int offset)
+{
+	struct panel_detector_priv *uc_priv = dev_get_uclass_priv(dev);
+	int ret;
+	ret = fdt_setprop_string(blob, offset, "panel-name", uc_priv->panel_name);
+	if (ret < 0) return ret;
+	ret = fdt_setprop_u64(blob, offset, "match-data", uc_priv->match_data);
+	if (ret < 0) return ret;
+
+	if (strcmp(uc_priv->panel_name, "rv059fbb") != 0 || panel_detector_has_writable_nvm(dev))
+		return 0;
+
+	if (load_vendor_data(dev) < 0) return 0;
+	ret = fdt_setprop_string(blob, offset, "serial-number", uc_priv->sn_str);
+	if (ret < 0) return ret;
+	ret = fdt_setprop_u32(blob, offset, "transmittance", uc_priv->transmittance);
+	if (ret < 0) return ret;
+
+	return 0;
+}
+
 UCLASS_DRIVER(panel_detector) = {
 	.id				= UCLASS_PANEL_DETECTOR,
 	.name				= "panel_detector",
diff --git a/board/sunxi/panel_detector.h b/board/sunxi/panel_detector.h
index 65294be844..fa86b81410 100644
--- a/board/sunxi/panel_detector.h
+++ b/board/sunxi/panel_detector.h
@@ -10,9 +10,24 @@
 struct panel_detector_priv {
 	char const* panel_name;
 	u64 match_data;
+	char sn_str[22];
+	u16 transmittance;
 };
 
+struct panel_detector_ops {
+	int (*has_writable_nvm)(struct udevice* dev);
+	int (*write_id_to_nvm)(struct udevice* dev, u64 id);
+	int (*read_id_from_nvm)(struct udevice* dev, u64 *id);
+};
+
+#define panel_detector_get_ops(dev) \
+		((struct panel_detector_ops *)(dev)->driver->ops)
+
 const char* panel_detector_get_panel_name(struct udevice *dev);
 u64 panel_detector_get_match_data(struct udevice *dev);
+int panel_detector_has_writable_nvm(struct udevice *dev);
+int panel_detector_write_id_to_nvm(struct udevice *dev, u64 id);
+int panel_detector_read_id_from_nvm(struct udevice *dev, u64 *id);
+int panel_detector_fill_in_fdt_node(struct udevice *dev, void *blob, int offset);
 
 #endif
diff --git a/board/sunxi/tc358870.c b/board/sunxi/tc358870.c
index a85c423016..dd7b42e5fb 100644
--- a/board/sunxi/tc358870.c
+++ b/board/sunxi/tc358870.c
@@ -18,15 +18,33 @@
 #include "panel_detector.h"
 #include "tc358870.h"
 
+static const char RV059FBB[] = "rv059fbb";
+
 static inline void kfreep(void *p) {
 	kfree(*(void**) p);
 }
+
+static inline void free_gpiop(struct gpio_desc *desc) {
+	if (desc->dev == NULL) return;
+	dm_gpio_set_value(desc, true);
+	dm_gpio_free(desc->dev, desc);
+	desc->dev = NULL;
+}
+
+static inline void disable_regp(struct udevice **regp) {
+	if (*regp == NULL) return;
+	regulator_set_enable(*regp, false);
+}
+
 #define cleanup(x) __attribute__((__cleanup__(x)))
 #define cleanup_free cleanup(kfreep)
+#define cleanup_gpio cleanup(free_gpiop)
+#define cleanup_reg cleanup(disable_regp)
 
 struct tc358870_priv {
 	struct gpio_desc bridge_reset;
 	struct gpio_desc panel_reset;
+	struct udevice *lcd_reg;
 	u8 vc;
 };
 
@@ -127,18 +145,6 @@ static int tc358870_write_u32(struct udevice *dev, u16 reg_addr, u32 value)
 	return tc358870_write(dev, reg_addr, &value, sizeof(value));
 }
 
-#if 0
-static int tc358870_read_u16(struct udevice *dev, u16 reg_addr, u16 *value)
-{
-	int ret = tc358870_read(dev, reg_addr, value, sizeof(*value));
-	if (ret < 0) {
-		return ret;
-	}
-	le16_to_cpus(value);
-	return 0;
-}
-#endif
-
 static int tc358870_read_u32(struct udevice *dev, u16 reg_addr, u32 *value)
 {
 	int ret;
@@ -150,37 +156,6 @@ static int tc358870_read_u32(struct udevice *dev, u16 reg_addr, u32 *value)
 	return 0;
 }
 
-#if 0 /* TODO: Why does RX_STATE_INT_STAT stay 0? */
-static int tc358870_wait_for_lprx_done(struct udevice *dev, u8 iface)
-{
-#define LPRX_PKT_START		(1u << 3u)
-#define LPRX_PKT_DONE		(1u << 2u)
-#define LPRX_PKT_THRESH_HIT	(1u << 1u)
-	int i, ret = 0;
-	u32 mask = LPRX_PKT_START | LPRX_PKT_DONE | LPRX_PKT_THRESH_HIT;
-	u32 out = 0;
-	for (i = 50; ((out & LPRX_PKT_DONE) == 0) && (i > 0) && (ret >= 0); i--)
-	{
-		ret = tc358870_read_u32(dev, RX_STATE_INT_STAT + iface * 0x0200u, &out);
-		mdelay(5);
-	}
-	if (ret < 0) {
-		dev_err(dev, "%s: read error %d\n", __func__, ret);
-		return ret;
-	}
-	if ((out & mask) == 0) {
-		dev_err(dev, "%s: waiting for LPRX packet reception timed out\n", __func__);
-		return 0;
-	}
-	if (!(out & LPRX_PKT_DONE)) {
-		dev_err(dev, "%s: not DONE yet!\n", __func__);
-	}
-	/* clear out the interrupt register */
-	tc358870_write_u32(dev, RX_STATE_INT_STAT + iface * 0x0200u, mask);
-	return 0;
-}
-#endif
-
 static ssize_t tc358770_fetch_from_fifo(struct udevice *dev, u8 iface, u8* data, int word_count)
 {
 	int i, len;
@@ -461,17 +436,17 @@ static bool tc358870_match_ls055r1sx04(struct udevice *dev)
 
 	len = tc358870_dsi_generic_read_short(dev, 0, 0xbfu, &out);
 	if (len <= 0 || !out) {
-		dev_err(dev, "%s: DSI read from BFh address failed (%ld)\n", __func__, len);
+		dev_warn(dev, "%s: DSI read from BFh address failed (%ld)\n", __func__, len);
 		return false;
 	}
 	tc358870_save_match_data(dev, out, len);
 	if (len >= sizeof(ALMID) && memcmp(out, ALMID, sizeof(ALMID)) == 0) {
-		printf("%s: matched ALMID: SHARP LS055R1SX04\n", __func__);
+		dev_info("%s: matched ALMID: SHARP LS055R1SX04\n", __func__);
 		return true;
 	}
-	dev_err(dev, "%s: ALMID doesn't match an R63419 driver.\n", __func__);
+	dev_warn(dev, "%s: ALMID doesn't match an R63419 driver.\n", __func__);
 	if (len == 0x1f) {
-		dev_err(dev, "%s: response length is correct though: PASS\n", __func__);
+		dev_warn(dev, "%s: response length is correct though: PASS\n", __func__);
 		return true;
 	}
 	return false;
@@ -486,20 +461,20 @@ static bool tc358870_match_rv059fbb(struct udevice *dev)
 	len = tc358870_dsi_dcs_read(dev, 1, 0xa1u, &out);
 
 	if (len <= 0 || !out) {
-		printf("%s: DSI read from A1h address failed\n", __func__);
+		dev_warn("%s: DSI read from A1h address failed\n", __func__);
 		return false;
 	}
 	tc358870_save_match_data(dev, out, len);
 	if (len >= sizeof(ID) && memcmp(out, ID, sizeof(ID)) == 0) {
-		printf("%s: matched RV059FBB by descriptor block (112233445566)\n", __func__);
+		dev_info("%s: matched RV059FBB by descriptor block (112233445566)\n", __func__);
 		return true;
 	}
 	if (out[6] == 0xffu) {
-		printf("%s: matched RV059FBB by Exit Code (0xff) at the end of A1h response\n", __func__);
+		dev_warn("%s: matched RV059FBB by Exit Code (0xff) at the end of A1h response\n", __func__);
 		return true;
 	}
 	if (len == 7) {
-		printf("%s: matched RV059FBB by the length (7) of its response to A1h\n", __func__);
+		dev_warn("%s: matched RV059FBB by the length (7) of its response to A1h\n", __func__);
 		return true;
 	}
 
@@ -518,6 +493,8 @@ static int tc358870_panel_init(struct udevice *dev)
 		dev_err(dev, "Couldn't identify any panel connected to the bridge.\n");
 	}
 
+	printf("Detected panel: %s\n", uc_priv->panel_name);
+
 	return 0;
 }
 
@@ -567,37 +544,215 @@ static int tc358870_enable(struct udevice *dev)
 	return 0;
 }
 
+static int tc358870_reset(struct udevice *dev)
+{
+	struct tc358870_priv *priv = dev_get_priv(dev);
+	struct panel_detector_priv *uc_priv = dev_get_uclass_priv(dev);
+
+	uc_priv->panel_name = "";
+	regulator_set_enable(priv->lcd_reg, false);
+	mdelay(10);
+	regulator_set_enable(priv->lcd_reg, true);
+	return tc358870_enable(dev);
+}
+
+struct rv059fbb_nvm {
+	struct udevice *dev;
+};
+
+static bool tc358870_is_rv059fbb_connected(struct udevice *dev)
+{
+	struct panel_detector_priv *uc_priv = dev_get_uclass_priv(dev);
+	return strncmp(uc_priv->panel_name, RV059FBB, sizeof(RV059FBB)) == 0;
+}
+
+static struct rv059fbb_nvm* rv059fbb_nvm_alloc(struct udevice *dev)
+{
+	if (!tc358870_is_rv059fbb_connected(dev))
+		return NULL;
+
+	struct rv059fbb_nvm* nvm = kmalloc(sizeof(struct rv059fbb_nvm), GFP_KERNEL);
+	nvm->dev = dev;
+	tc358870_dsi_dcs_write(dev, 1, MIPI_DCS_EXIT_SLEEP_MODE);
+	mdelay(25);
+
+	tc358870_dsi_generic_write_short(dev, 1, 0xb0u, 0x00u); /* Switch to page 0 */
+	tc358870_dsi_generic_write_short(dev, 1, 0xbau, 0x4bu); /* Enable VDD_OTP_SW */
+	tc358870_dsi_generic_write_short(dev, 1, 0xc0u, 0x94u); /* Enable VDD_OTP_EN */
+	tc358870_dsi_generic_write_short(dev, 1, 0xb0u, 0x01u); /* Switch to page 1 */
+	tc358870_dsi_generic_write_short(dev, 1, 0xb2u, 0xa5u); /* Set password to 'A5h' */
+
+	return nvm;
+}
+
+static void rv059fbb_nvm_free(struct rv059fbb_nvm *nvm)
+{
+	if (nvm == NULL) return;
+	tc358870_dsi_generic_write_short(nvm->dev, 1, 0xb0u, 0x00u); /* Switch to page 0 */
+	tc358870_dsi_generic_write_short(nvm->dev, 1, 0xbau, 0x43u); /* Disable VDD_OTP_SW */
+	tc358870_dsi_generic_write_short(nvm->dev, 1, 0xc0u, 0x14u); /* Disable VDD_OTP_EN */
+	kfree(nvm);
+}
+
+static void rv059fbb_nvm_freep(struct rv059fbb_nvm **p_nvm)
+{
+	if (p_nvm == NULL) return;
+	rv059fbb_nvm_free(*p_nvm);
+	*p_nvm = NULL;
+}
+
+static int rv059fbb_nvm_write_id(struct rv059fbb_nvm *nvm, u64 value)
+{
+	u8 reg[14] = {
+		0x39, 0x21, 0xff, 0x10, 0x00, 0x02,		/* Default values */
+	};
+
+	cpu_to_be64s(&value);
+	memcpy(reg + 6, &value, sizeof(value));
+
+	tc358870_dsi_generic_write_short(nvm->dev, 1, 0xb0u, 0x04u); /* Switch to page 4 */
+	tc358870_dsi_generic_write_long(nvm->dev, 1, 0xb1u, reg, sizeof(reg)); /* Set B1 function register */
+
+	tc358870_dsi_generic_write_short(nvm->dev, 1, 0xb0u, 0x01u); /* Switch to page 1 */
+	tc358870_dsi_generic_write_short(nvm->dev, 1, 0xb1u, 0x0eu); /* Select OTP group 14 */
+	tc358870_dsi_generic_write_short(nvm->dev, 1, 0xb3u, 0x01u); /* Start auto-write */
+	mdelay(25);
+
+	return 0;
+}
+
+static int rv059fbb_nvm_read_id(struct rv059fbb_nvm *nvm, u64 *id)
+{
+	cleanup_free u8 *out = NULL;
+	ssize_t len;
+	tc358870_dsi_generic_write_short(nvm->dev, 1, 0xb0u, 0x04u); /* Switch to page 4 */
+	len = tc358870_dsi_generic_read_short(nvm->dev, 1, 0xb1u, &out);
+
+	if (len < 14) return -EINVAL;
+	memcpy(id, out + 6, sizeof(*id));
+	be64_to_cpus(id);
+	return 0;
+}
+
+static u8 rv059fbb_nvm_read_otp(struct rv059fbb_nvm *nvm, u16 index)
+{
+	cleanup_free u8 *out = NULL;
+	ssize_t len;
+
+	if (index > 1008) return 0;
+	tc358870_dsi_generic_write_short(nvm->dev, 1, 0xb0u, 0x01u); /* Switch to page 4 */
+	tc358870_dsi_generic_write_short(nvm->dev, 1, 0xb4u, (u8)(index >> 8u)); /* Upper bits of OTP index */
+	tc358870_dsi_generic_write_short(nvm->dev, 1, 0xb5u, index & 0xffu); /* Lower bits of OTP index */
+	tc358870_dsi_generic_write_short(nvm->dev, 1, 0xb3u, 0x02u); /* Start read */
+	udelay(10);
+	len = tc358870_dsi_generic_read_short(nvm->dev, 1, 0xb6u, &out);
+	if (len < 1) return 0;
+	return out[0];
+}
+
+static int rv059fbb_nvm_is_writable(struct rv059fbb_nvm *nvm)
+{
+	u8 out = rv059fbb_nvm_read_otp(nvm, 432);
+	return !(out >> 7); /* the highest bit is 1 if written */
+}
+
+static int tc358870_has_writable_nvm(struct udevice *dev)
+{
+	if (!tc358870_is_rv059fbb_connected(dev))
+		return -ENODEV;
+
+	cleanup(rv059fbb_nvm_freep) struct rv059fbb_nvm* nvm = rv059fbb_nvm_alloc(dev);
+	if (nvm == NULL)
+		return -EACCES;
+
+	return rv059fbb_nvm_is_writable(nvm);
+}
+
+static int tc358870_write_id_to_nvm(struct udevice *dev, u64 id)
+{
+	int ret;
+	u64 read_id;
+	if (!tc358870_is_rv059fbb_connected(dev))
+		return -ENODEV;
+
+	cleanup(rv059fbb_nvm_freep) struct rv059fbb_nvm* nvm = rv059fbb_nvm_alloc(dev);
+	if (nvm == NULL)
+		return -EACCES;
+	ret = rv059fbb_nvm_write_id(nvm, id);
+	if (ret < 0)
+		return -EFAULT;
+
+	rv059fbb_nvm_free(nvm);
+	ret = tc358870_reset(dev);
+	if (ret < 0)
+		return -ERESTART;
+	nvm = rv059fbb_nvm_alloc(dev);
+	ret = rv059fbb_nvm_read_id(nvm, &read_id);
+	if (ret < 0)
+		return -EIO;
+	if (id != read_id) {
+		printf("The OTP has already been written.\n");
+		return -EIO;
+	}
+
+	return 0;
+}
+
+static int tc358870_read_id_from_nvm(struct udevice *dev, u64 *id)
+{
+	int ret;
+	if (!tc358870_is_rv059fbb_connected(dev))
+		return -ENODEV;
+
+	cleanup(rv059fbb_nvm_freep) struct rv059fbb_nvm* nvm = rv059fbb_nvm_alloc(dev);
+	if (nvm == NULL)
+		return -EACCES;
+
+	ret = rv059fbb_nvm_read_id(nvm, id);
+	if (ret < 0)
+		return ret;
+
+	return 0;
+}
+
+static const struct panel_detector_ops tc358870_ops = {
+	.has_writable_nvm = tc358870_has_writable_nvm,
+	.write_id_to_nvm = tc358870_write_id_to_nvm,
+	.read_id_from_nvm = tc358870_read_id_from_nvm,
+};
+
 static int tc358870_probe(struct udevice *dev)
 {
 	int ret;
-	struct udevice *reg;
 
 	struct tc358870_priv *priv = dev_get_priv(dev);
 	struct panel_detector_priv *uc_priv = dev_get_uclass_priv(dev);
 
+	cleanup_reg struct udevice *lcd_reg = NULL;
+	cleanup_gpio struct gpio_desc panel_reset;
+	cleanup_gpio struct gpio_desc bridge_reset;
+
 	if (device_get_uclass_id(dev->parent) != UCLASS_I2C)
 		return -EPROTONOSUPPORT;
 
-	ret = gpio_request_by_name(dev, "bridge-reset-gpios", 0, &priv->bridge_reset,
+	ret = gpio_request_by_name(dev, "bridge-reset-gpios", 0, &bridge_reset,
 				   GPIOD_IS_OUT | GPIOD_IS_OUT_ACTIVE);
 	if (ret) {
 		dev_err(dev, "%s: Could not decode bridge-reset-gpios (%d)\n", __func__, ret);
-		if (ret != -ENOENT)
-			return ret;
+		return ret;
 	}
 
-	ret = gpio_request_by_name(dev, "panel-reset-gpios", 0, &priv->panel_reset,
+	ret = gpio_request_by_name(dev, "panel-reset-gpios", 0, &panel_reset,
 				   GPIOD_IS_OUT | GPIOD_IS_OUT_ACTIVE);
 	if (ret) {
 		dev_err(dev, "%s: Could not decode panel-reset-gpios (%d)\n", __func__, ret);
-		if (ret != -ENOENT)
-			return ret;
+		return ret;
 	}
 
 	ret = uclass_get_device_by_phandle(UCLASS_REGULATOR, dev,
-					   "avdd_lcd-supply", &reg);
+					   "avdd_lcd-supply", &lcd_reg);
 	if (!ret) {
-		ret = regulator_set_enable(reg, true);
+		ret = regulator_set_enable(lcd_reg, true);
 		if (ret < 0) {
 			dev_err(dev, "%s: Failed to enable power: ret=%d\n", __func__, ret);
 			return ret;
@@ -607,8 +762,37 @@ static int tc358870_probe(struct udevice *dev)
 		return ret;
 	}
 
+	priv->bridge_reset = bridge_reset;
+	priv->panel_reset = panel_reset;
 	uc_priv->panel_name = "";
-	return tc358870_enable(dev);
+
+	ret = tc358870_enable(dev);
+	if (ret >= 0) {
+		priv->lcd_reg = lcd_reg;
+		/* prevent cleanup */
+		bridge_reset.dev = NULL;
+		panel_reset.dev = NULL;
+		lcd_reg = NULL;
+	}
+	return ret;
+}
+
+static int tc358870_disable(struct udevice *dev)
+{
+	struct tc358870_priv *priv = dev_get_priv(dev);
+	dm_gpio_set_value(&priv->bridge_reset, true);
+	dm_gpio_set_value(&priv->panel_reset, true);
+	regulator_set_enable(priv->lcd_reg, false);
+	return 0;
+}
+
+static int tc358870_remove(struct udevice *dev)
+{
+	struct tc358870_priv *priv = dev_get_priv(dev);
+	tc358870_disable(dev);
+	free_gpiop(&priv->bridge_reset);
+	free_gpiop(&priv->panel_reset);
+	return 0;
 }
 
 static const struct udevice_id tc358870_ids[] = {
@@ -620,6 +804,8 @@ U_BOOT_DRIVER(toshiba_tc358870) = {
 	.name	= "toshiba_tc358870",
 	.id	= UCLASS_PANEL_DETECTOR,
 	.of_match = tc358870_ids,
+	.ops	= &tc358870_ops,
 	.probe	= tc358870_probe,
+	.remove = tc358870_remove,
 	.priv_auto_alloc_size = sizeof(struct tc358870_priv),
 };
diff --git a/lib/vsprintf.c b/lib/vsprintf.c
index b4edee29b0..477abd8dc8 100644
--- a/lib/vsprintf.c
+++ b/lib/vsprintf.c
@@ -598,6 +598,10 @@ repeat:
 				qualifier = 'L';
 				++fmt;
 			}
+			if (qualifier == 'h' && *fmt == 'h') {
+				qualifier = 'H';
+				++fmt;
+			}
 		}
 
 		/* default base */
@@ -692,6 +696,10 @@ repeat:
 			num = (unsigned short) va_arg(args, int);
 			if (flags & SIGN)
 				num = (signed short) num;
+		} else if (qualifier == 'H') {
+			num = (unsigned char) va_arg(args, int);
+			if (flags & SIGN)
+				num = (signed char) num;
 		} else {
 			num = va_arg(args, unsigned int);
 			if (flags & SIGN)
-- 
2.31.1

