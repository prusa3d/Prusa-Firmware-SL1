From e4c7999ea7472478e410424c2fd32e53e01c498a Mon Sep 17 00:00:00 2001
From: Roman Beranek <roman.beranek@prusa3d.com>
Date: Thu, 22 Apr 2021 17:02:51 +0200
Subject: [PATCH] rauc update: toggle eMMC bootpart on slot flip

- added new subcommand 'mmc toggle-bootpart'
- update_active_rootfs_slot kept backward-compatible with u-boot
  lacking aforementioned command
---
 cmd/mmc.c                      | 47 ++++++++++++++++++++++++++++++++++
 include/configs/sunxi-common.h | 19 ++++++++++----
 2 files changed, 61 insertions(+), 5 deletions(-)

diff --git a/cmd/mmc.c b/cmd/mmc.c
index 6f3cb85cc0..f7540a9229 100644
--- a/cmd/mmc.c
+++ b/cmd/mmc.c
@@ -784,6 +784,50 @@ static int do_mmc_partconf(cmd_tbl_t *cmdtp, int flag,
 	/* acknowledge to be sent during boot operation */
 	return mmc_set_part_conf(mmc, ack, part_num, access);
 }
+
+int mmc_switch(struct mmc *mmc, u8 set, u8 index, u8 value);
+
+static int do_mmc_toggle_bootpart(cmd_tbl_t *cmdtp, int flag,
+				  int argc, char * const argv[])
+{
+	int dev, ret;
+	u8 part, part_conf;
+	struct mmc *mmc;
+
+	dev = (int)simple_strtoul(argv[1], NULL, 10);
+	mmc = init_mmc_device(dev, false);
+	if (!mmc)
+		return CMD_RET_FAILURE;
+
+	if (IS_SD(mmc)) {
+		puts("PARTITION_CONFIG only exists on eMMC\n");
+		return CMD_RET_FAILURE;
+	}
+
+	if (mmc->part_config == MMCPART_NOAVAILABLE) {
+		printf("No part_config info for ver. 0x%x\n", mmc->version);
+		return CMD_RET_FAILURE;
+	}
+
+	part = EXT_CSD_EXTRACT_BOOT_PART(mmc->part_config);
+	if (part < 1 || part > 2) {
+		printk("Neither BP1 nor BP2 is set as bootpart (%d), doing nothing.\n", part);
+		return CMD_RET_FAILURE;
+	}
+
+	part_conf = mmc->part_config;
+
+	part = part == 2 ? 1 : 2;
+	part_conf = (part_conf & ~EXT_CSD_BOOT_PART_NUM(0x7)) | EXT_CSD_BOOT_PART_NUM(part);
+	ret = mmc_switch(mmc, EXT_CSD_CMD_SET_NORMAL, EXT_CSD_PART_CONF, part_conf);
+
+	if (ret < 0) {
+		printk("eMMC bootpart switch failed: %d\n", ret);
+		return CMD_RET_FAILURE;
+	}
+	return CMD_RET_SUCCESS;
+}
+
 static int do_mmc_rst_func(cmd_tbl_t *cmdtp, int flag,
 			   int argc, char * const argv[])
 {
@@ -893,6 +937,7 @@ static cmd_tbl_t cmd_mmc[] = {
 	U_BOOT_CMD_MKENT(bootbus, 5, 0, do_mmc_bootbus, "", ""),
 	U_BOOT_CMD_MKENT(bootpart-resize, 4, 0, do_mmc_boot_resize, "", ""),
 	U_BOOT_CMD_MKENT(partconf, 5, 0, do_mmc_partconf, "", ""),
+	U_BOOT_CMD_MKENT(toggle-bootpart, 2, 0, do_mmc_toggle_bootpart, "", ""),
 	U_BOOT_CMD_MKENT(rst-function, 3, 0, do_mmc_rst_func, "", ""),
 #endif
 #if CONFIG_IS_ENABLED(CMD_MMC_RPMB)
@@ -960,6 +1005,8 @@ U_BOOT_CMD(
 	" - Change sizes of boot and RPMB partitions of specified device\n"
 	"mmc partconf dev [boot_ack boot_partition partition_access]\n"
 	" - Show or change the bits of the PARTITION_CONFIG field of the specified device\n"
+	"mmc toggle-bootpart dev\n"
+	" - If one of the two boot partitions is enabled, switch to the other one\n"
 	"mmc rst-function dev value\n"
 	" - Change the RST_n_FUNCTION field of the specified device\n"
 	"   WARNING: This is a write-once field and 0 / 1 / 2 are the only valid values.\n"
diff --git a/include/configs/sunxi-common.h b/include/configs/sunxi-common.h
index 186afdf838..7ef1ed7689 100644
--- a/include/configs/sunxi-common.h
+++ b/include/configs/sunxi-common.h
@@ -458,7 +458,9 @@ extern int soft_i2c_gpio_scl;
 		"setenv boot_prefixes /boot/; " \
 		"setenv slot; " \
 		"setenv rootlabel; " \
+		"setenv tmp; " \
 		"for BOOT_SLOT in ${BOOT_ORDER}; do " \
+			"" \
 			"setenv boots_left \\\\${BOOT_${BOOT_SLOT}_LEFT}; " \
 			"setexpr num_slot ${BOOT_SLOT} - a; " \
 			"setenv evaluate_boot_order \"" \
@@ -468,18 +470,25 @@ extern int soft_i2c_gpio_scl;
 				"setenv rootlabel rootfs.${num_slot}; " \
 				"\"; " \
 			"run evaluate_boot_order; " \
+			"if test \"${tmp} ${BOOT_SLOT}\" = \"${BOOT_ORDER}\"; then " \
+				"setenv BOOT_ORDER ${BOOT_SLOT} ${tmp}; " \
+				"setenv BOOT_${tmp}_LEFT 3; " \
+				"if mmc toggle-bootpart 1; then "  \
+					"setenv BOOT_${BOOT_SLOT}_LEFT 3; " \
+					"env delete tmp evaluate_boot_order slot rootlabel boots_left; "  \
+					"saveenv; " \
+					"reset; " \
+				"fi; " \
+			"fi; " \
 			"if test -n \"${slot}\"; " \
 			"then " \
-				"setexpr rootpart ${num_slot} + 2; " \
 				"saveenv; " \
 				"exit; " \
 			"fi; " \
+			"setenv tmp ${BOOT_SLOT}; "\
 		"done; " \
-		"echo \"No valid slot found, resetting tries to 3\"; " \
-		"setenv BOOT_A_LEFT 3; " \
-		"setenv BOOT_B_LEFT 3; " \
 		"saveenv; " \
-		"reset; " \
+		"run update_active_rootfs_slot; " \
 	"\0"
 
 #define PRUSA_KERNEL_CMDLINE \
-- 
2.31.1

