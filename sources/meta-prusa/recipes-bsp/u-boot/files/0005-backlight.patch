From ec668c71057d50698ff55c3029f5ab042f5c06ac Mon Sep 17 00:00:00 2001
From: Roman Beranek <roman.beranek@prusa3d.com>
Date: Wed, 15 Apr 2020 15:06:39 +0200
Subject: [PATCH] u-boot: prevent screen from lighting up for a brief period
 after linux gets started

When a pin gets muxed into its PWM function with its corresponding PWM channel disabled,
it will output high voltage level -> in the language of PWM we get 100% duty cycle.
This happens for a brief moment during boot because the pinmuxes are being configured
all at once during pinctrl driver probe, "way" earlier than the pwm driver gets picked up.

One possible solution is to initialize the pwm registers before Linux takes over and leave
it set at 0% duty cycle
---
 arch/arm/include/asm/arch-sunxi/gpio.h |  2 ++
 board/sunxi/board.c                    | 13 +++++++++++++
 drivers/pwm/sunxi_pwm.c                |  1 +
 drivers/video/Kconfig                  |  6 +++++-
 4 files changed, 21 insertions(+), 1 deletion(-)

diff --git a/arch/arm/include/asm/arch-sunxi/gpio.h b/arch/arm/include/asm/arch-sunxi/gpio.h
index 2969a530ae..0877db14f3 100644
--- a/arch/arm/include/asm/arch-sunxi/gpio.h
+++ b/arch/arm/include/asm/arch-sunxi/gpio.h
@@ -223,6 +223,8 @@ enum sunxi_gpio_number {
 #define SUN50I_GPL_R_TWI	2
 #define SUN50I_H616_GPL_R_TWI	3
 
+#define SUN50I_GPL_R_PWM	2
+
 #define SUN9I_GPN_R_RSB		3
 
 /* GPIO pin pull-up/down config */
diff --git a/board/sunxi/board.c b/board/sunxi/board.c
index 94dfbdc37b..50167b625b 100644
--- a/board/sunxi/board.c
+++ b/board/sunxi/board.c
@@ -39,6 +39,7 @@
 #include <asm/io.h>
 #include <u-boot/crc.h>
 #include <env_internal.h>
+#include <backlight.h>
 #include <linux/libfdt.h>
 #include <fdt_support.h>
 #include <nand.h>
@@ -237,6 +238,16 @@ void sunxi_grow_sd(void);
 static void sunxi_grow_sd(void) {}
 #endif
 
+static void sunxi_enable_backlight(void)
+{
+#ifdef CONFIG_DM_BACKLIGHT
+	struct udevice *backlight;
+	int ret = uclass_get_device(UCLASS_PANEL_BACKLIGHT, 0, &backlight);
+	if (!ret)
+		backlight_enable(backlight);
+#endif
+}
+
 /* add board specific code here */
 int board_init(void)
 {
@@ -319,6 +330,8 @@ int board_init(void)
 #endif
 #endif	/* CONFIG_DM_MMC */
 
+	sunxi_enable_backlight();
+
 	/* Uses dm gpio code so do this here and not in i2c_init_board() */
 	return soft_i2c_board_init();
 }
diff --git a/drivers/pwm/sunxi_pwm.c b/drivers/pwm/sunxi_pwm.c
index e3d5ee456b..cde4271bd5 100644
--- a/drivers/pwm/sunxi_pwm.c
+++ b/drivers/pwm/sunxi_pwm.c
@@ -49,6 +49,7 @@ static int sunxi_pwm_config_pinmux(void)
 {
 #ifdef CONFIG_MACH_SUN50I
 	sunxi_gpio_set_cfgpin(SUNXI_GPD(22), SUNXI_GPD_PWM);
+	sunxi_gpio_set_cfgpin(SUNXI_GPL(10), SUN50I_GPL_R_PWM);
 #endif
 	return 0;
 }
diff --git a/drivers/video/Kconfig b/drivers/video/Kconfig
index b69ffcae4b..d14fcc015f 100644
--- a/drivers/video/Kconfig
+++ b/drivers/video/Kconfig
@@ -14,9 +14,13 @@ config DM_VIDEO
 	  option compiles in the video uclass and routes all LCD/video access
 	  through this.
 
+config DM_BACKLIGHT
+	bool "Enable driver model support for backlight"
+	depends on DM
+
 config BACKLIGHT
 	bool "Enable panel backlight uclass support"
-	depends on DM_VIDEO
+	depends on DM_BACKLIGHT
 	default y
 	help
 	  This provides backlight uclass driver that enables basic panel
-- 
2.34.0

