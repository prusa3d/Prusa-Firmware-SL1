From cf3bc6ead43b91dda47439857d8fb52067bf40b8 Mon Sep 17 00:00:00 2001
From: Roman Beranek <roman.beranek@prusa3d.com>
Date: Thu, 17 Dec 2020 08:56:07 +0100
Subject: [PATCH] exposure panel identification

---
 .../dts/sun50i-a64-prusa64-sl1-u-boot.dtsi    |  35 ++
 arch/arm/dts/sun50i-a64-prusa64-sl1.dts       |  23 +-
 arch/arm/mach-sunxi/Kconfig                   |  11 +
 board/sunxi/Makefile                          |   6 +
 board/sunxi/board.c                           |  87 ++-
 board/sunxi/panel-detector-uclass.c           |  26 +
 board/sunxi/panel_detector.h                  |  18 +
 board/sunxi/tc358870.c                        | 564 ++++++++++++++++++
 board/sunxi/tc358870.h                        |  88 +++
 configs/prusa64-sl1_defconfig                 |   6 +-
 include/configs/sunxi-common.h                |   4 +-
 include/dm/uclass-id.h                        |   1 +
 12 files changed, 860 insertions(+), 9 deletions(-)
 create mode 100644 arch/arm/dts/sun50i-a64-prusa64-sl1-u-boot.dtsi
 create mode 100644 board/sunxi/panel-detector-uclass.c
 create mode 100644 board/sunxi/panel_detector.h
 create mode 100644 board/sunxi/tc358870.c
 create mode 100644 board/sunxi/tc358870.h

diff --git a/arch/arm/dts/sun50i-a64-prusa64-sl1-u-boot.dtsi b/arch/arm/dts/sun50i-a64-prusa64-sl1-u-boot.dtsi
new file mode 100644
index 0000000000..7f6efb04ed
--- /dev/null
+++ b/arch/arm/dts/sun50i-a64-prusa64-sl1-u-boot.dtsi
@@ -0,0 +1,35 @@
+// SPDX-License-Identifier: (GPL-2.0+ OR MIT)
+/*
+ * Copyright (C) 2020 Prusa Development, a.s.
+ * Written by Roman Beranek <roman.beranek@prusa3d.com>
+ */
+
+#include "sunxi-u-boot.dtsi"
+
+/ {
+	avdd_lcd: regulator@0 {
+		compatible = "regulator-fixed";
+		regulator-name = "dsi1-lcd-avdd";
+		regulator-min-microvolt = <3300000>;
+		regulator-max-microvolt = <3300000>;
+		gpio = <&pio 4 7 GPIO_ACTIVE_HIGH>; /* PE7 */
+		enable-active-high;
+	};
+
+};
+
+/* The Toshiba TC358870 HDMI-bridge is on r_i2c */
+&i2c0 {
+	tc358870: hdmi-bridge@f {
+		compatible = "toshiba,tc358870";
+		reg = <0x0f>;
+		vdd33_hdmi-supply = <&reg_dldo1>;
+		vdd12_mipi-supply = <&reg_fldo1>;
+		vdd11_hdmi-supply = <&reg_dcdc4>;
+		iovdd_lcd-supply = <&reg_eldo2>;
+		avdd_lcd-supply = <&avdd_lcd>;
+		bridge-reset-gpios = <&pio 4 1 GPIO_ACTIVE_LOW>; /* PE1 */
+		panel-reset-gpios = <&pio 3 24 GPIO_ACTIVE_LOW>; /* PD24 */
+		status = "okay";
+	};
+};
diff --git a/arch/arm/dts/sun50i-a64-prusa64-sl1.dts b/arch/arm/dts/sun50i-a64-prusa64-sl1.dts
index 89cc5b2f94..ca7bb92206 100644
--- a/arch/arm/dts/sun50i-a64-prusa64-sl1.dts
+++ b/arch/arm/dts/sun50i-a64-prusa64-sl1.dts
@@ -78,6 +78,13 @@
 	snps,reset-delays-us = <1000 20000 20000>;
 };
 
+/* The Toshiba TC358870 HDMI bridge is on i2c0 */
+&i2c0 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&i2c0_pins>;
+	status = "okay";
+};
+
 &mdio {
 	status = "disabled";
 	ext_rmii_phy1: ethernet-phy@1 {
@@ -186,6 +193,12 @@
 
 /* DCDC3 is polyphased with DCDC2 */
 
+&reg_dcdc4 {
+	regulator-min-microvolt = <1150000>;
+	regulator-max-microvolt = <1150000>;
+	regulator-name = "dsi1-1.15V-hdmi";
+};
+
 &reg_dcdc5 {
 	regulator-always-on;
 	regulator-min-microvolt = <1360000>;
@@ -209,13 +222,13 @@
 &reg_dldo2 {
 	regulator-min-microvolt = <3300000>;
 	regulator-max-microvolt = <3300000>;
-	regulator-name = "vcc-mipi";
+	regulator-name = "dsi0-3.3v-mipi";
 };
 
 &reg_dldo3 {
-	regulator-min-microvolt = <2800000>;
-	regulator-max-microvolt = <2800000>;
-	regulator-name = "vcc-avdd-csi";
+	regulator-min-microvolt = <3300000>;
+	regulator-max-microvolt = <3300000>;
+	regulator-name = "dsi0-3.3v-ctp";
 };
 
 &reg_dldo4 {
@@ -238,7 +251,7 @@
 &reg_eldo2 {
 	regulator-min-microvolt = <1800000>;
 	regulator-max-microvolt = <1800000>;
-	regulator-name = "vcc-dvdd-csi";
+	regulator-name = "dsi1-1.8v";
 };
 
 &reg_fldo1 {
diff --git a/arch/arm/mach-sunxi/Kconfig b/arch/arm/mach-sunxi/Kconfig
index 16d41b83af..13665fe44e 100644
--- a/arch/arm/mach-sunxi/Kconfig
+++ b/arch/arm/mach-sunxi/Kconfig
@@ -1009,4 +1009,15 @@ config PINE64_DT_SELECTION
 	  option, the device tree selection code specific to Pine64 which
 	  utilizes the DRAM size will be enabled.
 
+config BRIDGED_PANEL_DETECTION
+	bool "Detect panel connected to a TC358870 bridge"
+	default n
+	depends on MACH_SUN50I
+	select DM_I2C
+
+config BRIDGED_PANEL_DETECTION_TEST
+	bool "Panel detection test (NOT FOR NORMAL USE)"
+	default n
+	depends on BRIDGED_PANEL_DETECTION
+
 endif
diff --git a/board/sunxi/Makefile b/board/sunxi/Makefile
index ed3553254e..6ec648996d 100644
--- a/board/sunxi/Makefile
+++ b/board/sunxi/Makefile
@@ -14,4 +14,10 @@ obj-$(CONFIG_MACH_SUN7I)	+= dram_sun5i_auto.o
 
 ifndef CONFIG_SPL_BUILD
 obj-$(CONFIG_EFI_PARTITION)	+= grow_sd.o
+
+ifdef CONFIG_BRIDGED_PANEL_DETECTION
+obj-y	+= panel-detector-uclass.o
+obj-y	+= tc358870.o
+endif
+
 endif
diff --git a/board/sunxi/board.c b/board/sunxi/board.c
index 511459f806..09cb9712ac 100644
--- a/board/sunxi/board.c
+++ b/board/sunxi/board.c
@@ -39,6 +39,7 @@
 #include <spl.h>
 #include <sy8106a.h>
 #include <asm/setup.h>
+#include "panel_detector.h"
 
 #if defined CONFIG_VIDEO_LCD_PANEL_I2C && !(defined CONFIG_SPL_BUILD)
 /* So that we can use pin names in Kconfig and sunxi_name_to_gpio() */
@@ -892,6 +893,38 @@ static void setup_environment(const void *fdt)
 	}
 }
 
+#ifdef CONFIG_BRIDGED_PANEL_DETECTION_TEST
+static int backlight_breathe(int period) {
+	static const int seq[] = {
+		0, 2, 3, 5, 7, 9, 10, 12, 14, 16, 17, 19, 21, 22, 24, 26, 28,
+		29, 31, 33, 34, 36, 37, 39, 41, 42, 44, 45, 47, 48, 50, 52,
+		53, 54, 56, 57, 59, 60, 62, 63, 64, 66, 67, 68, 69, 71, 72,
+		73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 87,
+		88, 89, 90, 91, 91, 92, 93, 93, 94, 95, 95, 96, 96, 97, 97,
+		97, 98, 98, 98, 99, 99, 99, 99, 100, 100, 100, 100, 100, 100
+	};
+	int i = 0, r;
+	struct udevice *backlight;
+	r = uclass_first_device(UCLASS_PANEL_BACKLIGHT, &backlight);
+	if (r < 0) return r;
+	if (period == 0) {
+		while (r >= 0) {
+			r = backlight_set_brightness(backlight, 100);
+			mdelay(1000);
+		}
+	}
+	int step_delay = period / (2 * (int)ARRAY_SIZE(seq) - 1);
+	while (r >= 0) {
+		r = backlight_set_brightness(backlight, seq[abs(i)]);
+		if (++i >= (int)ARRAY_SIZE(seq)) {
+			i = 1 - (int)ARRAY_SIZE(seq);
+		}
+		mdelay(step_delay);
+	}
+	return 0;
+}
+#endif
+
 int misc_init_r(void)
 {
 	uint boot;
@@ -919,6 +952,44 @@ int misc_init_r(void)
 
 #ifdef CONFIG_USB_ETHER
 	usb_ether_init();
+#endif
+#ifdef CONFIG_BRIDGED_PANEL_DETECTION
+	int r;
+	struct udevice *detector;
+	char const *panel_name;
+	char *edid_arg;
+	size_t edid_arg_length;
+
+	r = uclass_first_device(UCLASS_PANEL_DETECTOR, &detector);
+	if (r)
+		return r;
+	panel_name = panel_detector_get_panel_name(detector);
+	if (strlen(panel_name)) {
+		edid_arg_length = 37 + strlen(panel_name);
+		edid_arg = kmalloc(edid_arg_length, GFP_KERNEL);
+		snprintf(edid_arg, edid_arg_length, "drm.edid_firmware=HDMI-A-1:edid/%s.bin", panel_name);
+	} else {
+		edid_arg = "video=HDMI-A-1:d";
+	}
+	env_set("edid_bootarg", edid_arg);
+
+#ifdef CONFIG_BRIDGED_PANEL_DETECTION_TEST
+	u64 match_data = panel_detector_get_match_data(detector);
+	printf("%s: match_data = 0x%016llx\n", __func__, match_data);
+	if (!strcmp("ls055r1sx04", panel_name)) {
+		switch (match_data) {
+		case 0x0000000219342201ul:
+			backlight_breathe(0);
+			break;
+		case 0x0000000000000000ul:
+			backlight_breathe(2000);
+			break;
+		default:
+			backlight_breathe(300);
+			break;
+		}
+	}
+#endif
 #endif
 
 	return 0;
@@ -933,11 +1004,25 @@ int ft_board_setup(void *blob, bd_t *bd)
 	 * ethernet aliases the u-boot copy does not have.
 	 */
 	setup_environment(blob);
-
 #ifdef CONFIG_VIDEO_DT_SIMPLEFB
 	r = sunxi_simplefb_setup(blob);
 	if (r)
 		return r;
+#endif
+#ifdef CONFIG_BRIDGED_PANEL_DETECTION
+	int offset;
+	struct udevice *detector;
+
+	r = uclass_first_device(UCLASS_PANEL_DETECTOR, &detector);
+	if (r)
+		return r;
+	offset = fdt_node_offset_by_compatible(blob, -1, "toshiba,tc358870");
+	if (offset < 0)
+		return offset;
+	r = fdt_setprop_string(blob, offset, "panel-name", panel_detector_get_panel_name(detector));
+	r = fdt_setprop_u64(blob, offset, "match-data", panel_detector_get_match_data(detector));
+	if (r)
+		return r;
 #endif
 	return 0;
 }
diff --git a/board/sunxi/panel-detector-uclass.c b/board/sunxi/panel-detector-uclass.c
new file mode 100644
index 0000000000..e37231e8f8
--- /dev/null
+++ b/board/sunxi/panel-detector-uclass.c
@@ -0,0 +1,26 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Copyright (C) 2020 Prusa Development, a.s.
+ * Written by Roman Beranek <roman.beranek@prusa3d.com>
+ */
+
+#include <dm.h>
+#include "panel_detector.h"
+
+const char* panel_detector_get_panel_name(struct udevice *dev)
+{
+	struct panel_detector_priv *uc_priv = dev_get_uclass_priv(dev);
+	return uc_priv->panel_name;
+}
+
+u64 panel_detector_get_match_data(struct udevice *dev)
+{
+	struct panel_detector_priv *uc_priv = dev_get_uclass_priv(dev);
+	return uc_priv->match_data;
+}
+
+UCLASS_DRIVER(panel_detector) = {
+	.id				= UCLASS_PANEL_DETECTOR,
+	.name				= "panel_detector",
+	.per_device_auto_alloc_size	= sizeof(struct panel_detector_priv),
+};
diff --git a/board/sunxi/panel_detector.h b/board/sunxi/panel_detector.h
new file mode 100644
index 0000000000..65294be844
--- /dev/null
+++ b/board/sunxi/panel_detector.h
@@ -0,0 +1,18 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+/*
+ * Copyright (C) 2020 Prusa Development, a.s.
+ * Written by Roman Beranek <roman.beranek@prusa3d.com>
+ */
+
+#ifndef __PANEL_DETECTOR
+#define __PANEL_DETECTOR
+
+struct panel_detector_priv {
+	char const* panel_name;
+	u64 match_data;
+};
+
+const char* panel_detector_get_panel_name(struct udevice *dev);
+u64 panel_detector_get_match_data(struct udevice *dev);
+
+#endif
diff --git a/board/sunxi/tc358870.c b/board/sunxi/tc358870.c
new file mode 100644
index 0000000000..f6e5e59554
--- /dev/null
+++ b/board/sunxi/tc358870.c
@@ -0,0 +1,564 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Copyright (C) 2020 Prusa Development, a.s.
+ * Written by Roman Beranek <roman.beranek@prusa3d.com>
+ */
+
+#include <common.h>
+#include <dm.h>
+#include <errno.h>
+#include <i2c.h>
+#include <log.h>
+#include <mipi_display.h>
+#include <asm/gpio.h>
+#include <linux/delay.h>
+#include <power/regulator.h>
+#include <hexdump.h>
+
+#include "panel_detector.h"
+#include "tc358870.h"
+
+static inline void kfreep(void *p) {
+	kfree(*(void**) p);
+}
+#define cleanup(x) __attribute__((__cleanup__(x)))
+#define cleanup_free cleanup(kfreep)
+
+struct tc358870_priv {
+	struct gpio_desc bridge_reset;
+	struct gpio_desc panel_reset;
+};
+
+enum i2c_xfer {
+	I2C_READ = 0,
+	I2C_WRITE = 1,
+};
+
+static void tc358870_print_xfer(enum i2c_xfer rw, u8 *reg, u8 *data, size_t len)
+{
+	static const char* const labels[] = {
+		[I2C_READ] = "I2C READ ",
+		[I2C_WRITE] = "I2C_WRITE",
+	};
+	int i;
+
+	printf("%s [0x%02x%02x]: 0x", labels[rw], reg[rw ? 0 : 1], reg[rw ? 1 : 0]);
+	for (i = (int)len - 1; i >= 0; i--)
+		printf("%02x", data[i]);
+	printf("\n");
+}
+
+static int tc358870_write(struct udevice *dev, u16 reg, const void* buf, size_t len)
+{
+	cleanup_free u8 *xfer = NULL;
+	struct i2c_msg msg;
+	int ret;
+	size_t size;
+	struct dm_i2c_chip *chip = dev_get_parent_platdata(dev);
+
+	size = 2 + len;
+	xfer = kmalloc(size, GFP_KERNEL);
+	if (!xfer)
+		return -ENOMEM;
+
+	cpu_to_be16s(&reg);
+
+	msg.addr = chip->chip_addr;
+	msg.flags = 0;
+	memcpy(xfer, &reg, sizeof(reg));
+	memcpy(xfer + 2, buf, len);
+	msg.buf = xfer;
+	msg.len = size;
+
+	tc358870_print_xfer(I2C_WRITE, xfer, xfer + 2, len);
+	ret = dm_i2c_xfer(dev, &msg, 1);
+	if (xfer[0] == 0x01u || xfer[0] == 0x02u) {
+		xfer[0] += 0x02u;
+		tc358870_print_xfer(I2C_WRITE, xfer, xfer + 2, len);
+		ret = dm_i2c_xfer(dev, &msg, 1);
+	}
+
+	if (ret < 0) {
+		dev_err(dev, "%s: write failed, reg=%#x, ret=%d\n", __func__, reg, ret);
+		return ret;
+	}
+
+	return 0;
+}
+
+static int tc358870_read(struct udevice *dev, u16 reg_addr, void *data, size_t len)
+{
+	struct i2c_msg msg[2];
+	int ret;
+	struct dm_i2c_chip *chip = dev_get_parent_platdata(dev);
+
+	/* TODO WTF? Register address is somehow being sent backwards. I2C driver bug? (mvtwsi) */
+	cpu_to_le16s(&reg_addr);
+
+	msg[0].addr = chip->chip_addr;
+	msg[0].flags = 0;
+	msg[0].buf = (u8*)&reg_addr;
+	msg[0].len = sizeof(reg_addr);
+	msg[1].addr = chip->chip_addr;
+	msg[1].flags = I2C_M_RD;
+	msg[1].buf = data;
+	msg[1].len = len;
+	ret = dm_i2c_xfer(dev, msg, 2);
+
+	if (ret < 0) {
+		dev_err(dev, "%s: read failed, reg=%.2x, ret=%d\n", __func__, (int)reg_addr, ret);
+		return ret;
+	}
+	tc358870_print_xfer(I2C_READ, msg[0].buf, msg[1].buf, len);
+
+	return 0;
+}
+
+static int tc358870_write_u16(struct udevice *dev, u16 reg_addr, u16 value)
+{
+	cpu_to_le16s(&value);
+	return tc358870_write(dev, reg_addr, &value, sizeof(value));
+}
+
+static int tc358870_write_u32(struct udevice *dev, u16 reg_addr, u32 value)
+{
+	cpu_to_le32s(&value);
+	return tc358870_write(dev, reg_addr, &value, sizeof(value));
+}
+
+#if 0
+static int tc358870_read_u16(struct udevice *dev, u16 reg_addr, u16 *value)
+{
+	int ret = tc358870_read(dev, reg_addr, value, sizeof(*value));
+	if (ret < 0) {
+		return ret;
+	}
+	le16_to_cpus(value);
+	return 0;
+}
+#endif
+
+static int tc358870_read_u32(struct udevice *dev, u16 reg_addr, u32 *value)
+{
+	int ret;
+	ret = tc358870_read(dev, reg_addr, value, sizeof(*value));
+	if (ret < 0) {
+		return ret;
+	}
+	le32_to_cpus(value);
+	return 0;
+}
+
+#if 0 /* TODO: Why does RX_STATE_INT_STAT stay 0? */
+static int tc358870_wait_for_lprx_done(struct udevice *dev, u8 iface)
+{
+#define LPRX_PKT_START		(1u << 3u)
+#define LPRX_PKT_DONE		(1u << 2u)
+#define LPRX_PKT_THRESH_HIT	(1u << 1u)
+	int i, ret = 0;
+	u32 mask = LPRX_PKT_START | LPRX_PKT_DONE | LPRX_PKT_THRESH_HIT;
+	u32 out = 0;
+	for (i = 50; ((out & LPRX_PKT_DONE) == 0) && (i > 0) && (ret >= 0); i--)
+	{
+		ret = tc358870_read_u32(dev, RX_STATE_INT_STAT + iface * 0x0200u, &out);
+		mdelay(5);
+	}
+	if (ret < 0) {
+		dev_err(dev, "%s: read error %d\n", __func__, ret);
+		return ret;
+	}
+	if ((out & mask) == 0) {
+		dev_err(dev, "%s: waiting for LPRX packet reception timed out\n", __func__);
+		return 0;
+	}
+	if (!(out & LPRX_PKT_DONE)) {
+		dev_err(dev, "%s: not DONE yet!\n", __func__);
+	}
+	/* clear out the interrupt register */
+	tc358870_write_u32(dev, RX_STATE_INT_STAT + iface * 0x0200u, mask);
+	return 0;
+}
+#endif
+
+static ssize_t tc358770_fetch_from_fifo(struct udevice *dev, u8 iface, u8* data, int word_count)
+{
+	int i, len;
+	u32 fifo_level = 0;
+	u8 buf[4];
+
+	for (i = 50; i >= 0 && ((fifo_level + 1) * 4) < word_count; i--) {
+		tc358870_read_u32(dev, LPRX_FIFO_LEVEL + iface * 0x0200u, &fifo_level);
+		mdelay(10);
+	}
+	for (i = 0; fifo_level > 0; fifo_level--) {
+		if (i >= word_count) {
+			dev_err(dev, "%s: unexpected data in RXFIFO\n", __func__);
+			return -EINVAL;
+		}
+		tc358870_read(dev, RXFIFO + iface * 0x0200u, data + i, 4);
+		i += 4;
+	}
+	if (i < word_count) {
+		len = word_count - i;
+		debug("%s: reading last %d bytes from FIFO\n", __func__, len);
+		if (len >= 4) dev_err(dev, "%s: expected more data in FIFO\n", __func__);
+		tc358870_read(dev, RXFIFO + iface * 0x0200u, buf, 4);
+		memcpy(data + i, buf, len);
+		i += len;
+	}
+	return i;
+}
+
+static ssize_t tc358870_fetch_rx(struct udevice *dev, u8 iface, u8** buf)
+{
+	struct {
+		union {
+			u16 wc;
+			u8 data[2];
+		} rxwc;
+		u8 rxdt:6;
+		u8 rxvc:2;
+		u8 reserved;
+	} __attribute__((packed)) rxhdr;
+
+	u16 word_count;
+	int ret;
+
+	tc358870_read(dev, RX_HEADER + iface * 0x0200u, &rxhdr, sizeof(rxhdr));
+	switch (rxhdr.rxdt) {
+	case MIPI_DSI_RX_GENERIC_SHORT_READ_RESPONSE_1BYTE:
+	case MIPI_DSI_RX_DCS_SHORT_READ_RESPONSE_1BYTE:
+		word_count = 1;
+		break;
+	case MIPI_DSI_RX_GENERIC_SHORT_READ_RESPONSE_2BYTE:
+	case MIPI_DSI_RX_DCS_SHORT_READ_RESPONSE_2BYTE:
+		word_count = 2;
+		break;
+	case MIPI_DSI_RX_DCS_LONG_READ_RESPONSE:
+	case MIPI_DSI_RX_GENERIC_LONG_READ_RESPONSE:
+		word_count = rxhdr.rxwc.wc;
+		break;
+	default:
+		word_count = 0;
+		break;
+	}
+
+	if (!word_count) return 0;
+
+	*buf = kmalloc(word_count, GFP_KERNEL);
+	if (!*buf)
+		return -ENOMEM;
+
+	switch (rxhdr.rxdt) {
+	case MIPI_DSI_RX_GENERIC_SHORT_READ_RESPONSE_1BYTE:
+	case MIPI_DSI_RX_DCS_SHORT_READ_RESPONSE_1BYTE:
+	case MIPI_DSI_RX_GENERIC_SHORT_READ_RESPONSE_2BYTE:
+	case MIPI_DSI_RX_DCS_SHORT_READ_RESPONSE_2BYTE:
+		memcpy(*buf, rxhdr.rxwc.data, word_count);
+		break;
+	case MIPI_DSI_RX_DCS_LONG_READ_RESPONSE:
+	case MIPI_DSI_RX_GENERIC_LONG_READ_RESPONSE:
+		ret = tc358770_fetch_from_fifo(dev, iface, *buf, word_count);
+		if (ret != word_count)
+			dev_err(dev, "%s: mismatch: number of bytes fetched from FIFO(%d) != WC(%d)\n",
+	   			__func__, ret, word_count);
+		break;
+	default:
+		break;
+	}
+
+	return word_count;
+}
+
+static inline u16 packet_header(u8 type)
+{
+	switch (type) {
+	case MIPI_DSI_GENERIC_READ_REQUEST_0_PARAM:
+	case MIPI_DSI_GENERIC_READ_REQUEST_1_PARAM:
+	case MIPI_DSI_GENERIC_READ_REQUEST_2_PARAM:
+	case MIPI_DSI_GENERIC_SHORT_WRITE_0_PARAM:
+	case MIPI_DSI_GENERIC_SHORT_WRITE_1_PARAM:
+	case MIPI_DSI_GENERIC_SHORT_WRITE_2_PARAM:
+	case MIPI_DSI_DCS_READ:
+	case MIPI_DSI_DCS_SHORT_WRITE:
+	case MIPI_DSI_DCS_SHORT_WRITE_PARAM:
+		return type;
+	case MIPI_DSI_GENERIC_LONG_WRITE:
+	case MIPI_DSI_DCS_LONG_WRITE:
+		return 0x8000u | type;
+	default:
+		return 0;
+	}
+}
+
+static ssize_t tc358870_dsi_read(struct udevice *dev, u8 iface, u8 type, u8 address, u8 **out)
+{
+	int ret;
+	if (iface > 1) return -EINVAL;
+	ret = tc358870_write_u16(dev, CMD_SEL, iface << 1u);
+	if (ret) return ret;
+	ret = tc358870_write_u16(dev, DCSCMD_Q, packet_header(type));
+	if (ret < 0) return ret;
+	ret = tc358870_write_u16(dev, DCSCMD_Q, address);
+	if (ret < 0) return ret;
+	mdelay(1);
+	return tc358870_fetch_rx(dev, iface, out);
+}
+
+static ssize_t tc358870_dsi_dcs_read(struct udevice *dev, u8 iface, u8 address, u8 **out)
+{
+	return tc358870_dsi_read(dev, iface, MIPI_DSI_DCS_READ, address, out);
+}
+
+static ssize_t tc358870_dsi_generic_read_short(struct udevice *dev, u8 iface, u8 address, u8 **out)
+{
+	return tc358870_dsi_read(dev, iface, MIPI_DSI_GENERIC_READ_REQUEST_1_PARAM, address, out);
+}
+
+static int tc358870_dsi_generic_write_short(struct udevice *dev, u8 iface, u8 address, u8 param)
+{
+	int ret;
+	if (iface > 1) return -EINVAL;
+	ret = tc358870_write_u16(dev, CMD_SEL, iface);
+	if (ret) return ret;
+	ret = tc358870_write_u16(dev, DCSCMD_Q,
+			  	 packet_header(MIPI_DSI_GENERIC_SHORT_WRITE_2_PARAM));
+	if (ret) return ret;
+	ret = tc358870_write_u16(dev, DCSCMD_Q, address | (param << 8u));
+	return ret;
+}
+
+static void tc358870_dsi_init(struct udevice *dev)
+{
+	tc358870_write_u16(dev, ConfCtl0,		0x0004u);
+	tc358870_write_u16(dev, SysCtl,			0x1200u);
+	udelay(1000);
+	tc358870_write_u16(dev, SysCtl,			0x0000u);
+	tc358870_write_u16(dev, ConfCtl1,		0x0008u);
+
+	tc358870_write_u32(dev, DSITX_CLKEN,		0x00000001u);
+	tc358870_write_u32(dev, PPI_CLKSEL,		0x00000001u);
+	tc358870_write_u32(dev, MIPI_PLL_CTRL,		0x00000001u);
+	tc358870_write_u32(dev, MIPI_PLL_CONF,		0x00006d90u);
+	udelay(1500);
+	tc358870_write_u32(dev, MIPI_PLL_CTRL,		0x00000003u);
+	tc358870_write_u32(dev, LANE_ENABLE,		0x00000014u);
+	tc358870_write_u32(dev, LINE_INIT_COUNT,	0x00000e34u);
+	tc358870_write_u32(dev, HSTX_TO_COUNT,		0x00000000u);
+	tc358870_write_u32(dev, FUNC_ENABLE,		0x00000101u);
+	tc358870_write_u32(dev, DSI_TATO_COUNT,		0x00010000u);
+	tc358870_write_u32(dev, DSI_PRESP_BTA_COUNT,	0x00005000u);
+	tc358870_write_u32(dev, DSI_PRESP_LPR_COUNT,	0x00010000u);
+	tc358870_write_u32(dev, DSI_PRESP_LPW_COUNT,	0x00010000u);
+	tc358870_write_u32(dev, DSI_PRESP_HSR_COUNT,	0x00010000u);
+	tc358870_write_u32(dev, DSI_PRESP_HSW_COUNT,	0x00010000u);
+	tc358870_write_u32(dev, DSI_PR_TO_COUNT,	0x00001000u);
+	tc358870_write_u32(dev, DSI_LRX_H_TO_COUNT,	0x00010000u);
+	tc358870_write_u32(dev, FUNC_MODE,		0x00000160u);
+	tc358870_write_u32(dev, DSIRX_VC_ENABLE,	0x00000001u);
+	tc358870_write_u32(dev, IND_TO_COUNT,		0x000000c8u);
+	tc358870_write_u32(dev, DSI_HSYNC_STOP_COUNT,	0x0000002au);
+	tc358870_write_u32(dev, DSITX_MODE,		0x00000081u);
+	tc358870_write_u32(dev, APF_VDELAYCNT,		0x000001e8u);
+	tc358870_write_u32(dev, DSI_HSYNC_WIDTH,	0x00000021u);
+	tc358870_write_u32(dev, DSI_HBPR,		0x00000091u);
+	tc358870_write_u32(dev, DSI_RX_STATE_INT_MASK,	0x00000000u);
+	tc358870_write_u32(dev, DSI_LPRX_THRESH_COUNT,	0x00000015u);
+	tc358870_write_u32(dev, APP_SIDE_ERR_INT_MASK,	0x00000000u);
+	tc358870_write_u32(dev, DSI_RX_ERR_INT_MASK,	0x00000080u);
+	tc358870_write_u32(dev, PPI_DPHY_LPTXTIMECNT,	0x00000003u);
+	tc358870_write_u32(dev, PPI_DPHY_TCLK_HEADERCNT,0x00180203u);
+	tc358870_write_u32(dev, PPI_DPHY_TCLK_TRAILCNT,	0x00080007u);
+	tc358870_write_u32(dev, PPI_DPHY_THS_HEADERCNT,	0x000c0005u);
+	tc358870_write_u32(dev, PPI_DPHY_TWAKEUPCNT,	0x00004709u);
+	tc358870_write_u32(dev, PPI_DPHY_TCLK_POSTCNT,	0x0000000bu);
+	tc358870_write_u32(dev, PPI_DPHY_THSTRAILCNT,	0x00080006u);
+	tc358870_write_u32(dev, PPI_DPHY_HSTXVREGCNT,	0x00000020u);
+	tc358870_write_u32(dev, PPI_DPHY_HSTXVREGEN,	0x0000001fu);
+	tc358870_write_u32(dev, PPI_DSI_BTA_COUNT,	0x00030003u);
+	tc358870_write_u32(dev, PPI_DPHYTX_ADJUST,	0x00000002u);
+	tc358870_write_u32(dev, PPI_DPHY_CAP,		0x000002aau);
+	tc358870_write_u32(dev, DSITX_START,		0x00000001u);
+	tc358870_write_u32(dev, MODE_CONFIG,		0x00000016u);
+	udelay(1000);
+}
+
+static int tc358870_save_match_data(struct udevice *dev, const u8* data, size_t len)
+{
+	struct panel_detector_priv *uc_priv = dev_get_uclass_priv(dev);
+	memcpy(&uc_priv->match_data, data, min(len, 8ul));
+	return 0;
+}
+
+static bool tc358870_match_ls055r1sx04(struct udevice *dev)
+{
+	static const u8 ALMID[] = { 0x01, 0x22, 0x34, 0x19 };
+	cleanup_free u8 *out = NULL;
+	ssize_t len;
+
+	tc358870_dsi_generic_write_short(dev, 0, 0xb0u, 0x00u);
+
+	len = tc358870_dsi_generic_read_short(dev, 0, 0xbfu, &out);
+	if (len <= 0 || !out) {
+		dev_err(dev, "%s: DSI read from BFh address failed (%ld)\n", __func__, len);
+		return false;
+	}
+	tc358870_save_match_data(dev, out, len);
+	if (len >= sizeof(ALMID) && memcmp(out, ALMID, sizeof(ALMID)) == 0) {
+		printf("%s: matched ALMID: SHARP LS055R1SX04\n", __func__);
+		return true;
+	}
+	dev_err(dev, "%s: ALMID doesn't match an R63419 driver.\n", __func__);
+	if (len == 0x1f) {
+		dev_err(dev, "%s: response length is correct though: PASS\n", __func__);
+		return true;
+	}
+	return false;
+}
+
+static bool tc358870_match_rv059fbb(struct udevice *dev)
+{
+	static const u8 ID[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };
+	cleanup_free u8 *out = NULL;
+	ssize_t len;
+
+	len = tc358870_dsi_dcs_read(dev, 1, 0xa1u, &out);
+
+	if (len <= 0 || !out) {
+		printf("%s: DSI read from A1h address failed\n", __func__);
+		return false;
+	}
+	tc358870_save_match_data(dev, out, len);
+	if (len >= sizeof(ID) && memcmp(out, ID, sizeof(ID)) == 0) {
+		printf("%s: matched RV059FBB by descriptor block (112233445566)\n", __func__);
+		return true;
+	}
+	if (out[6] == 0xffu) {
+		printf("%s: matched RV059FBB by Exit Code (0xff) at the end of A1h response\n", __func__);
+		return true;
+	}
+	if (len == 7) {
+		printf("%s: matched RV059FBB by the length (7) of its response to A1h\n", __func__);
+		return true;
+	}
+
+	return false;
+}
+
+static int tc358870_panel_init(struct udevice *dev)
+{
+	struct panel_detector_priv *uc_priv = dev_get_uclass_priv(dev);
+
+	if (tc358870_match_ls055r1sx04(dev)) {
+		uc_priv->panel_name = "ls055r1sx04";
+	} else if (tc358870_match_rv059fbb(dev)) {
+		uc_priv->panel_name = "rv059fbb";
+	} else {
+		dev_err(dev, "Couldn't identify any panel connected to the bridge.\n");
+	}
+
+	return 0;
+}
+
+static int tc358870_check_chipid(struct udevice *dev)
+{
+	struct __attribute__((packed)) {
+		u8 revid;
+		u8 chipid;
+	} chipid;
+	int ret;
+
+	ret = tc358870_read(dev, ChipID, &chipid, sizeof(chipid));
+	if (ret < 0) {
+		dev_err(dev, "%s: read id failed: %d\n", __func__, ret);
+		return ret;
+	}
+	if (chipid.chipid != 0x47u) {
+		dev_err(dev, "Chip ID mismatch! Expected 0x47 but received 0x%02x\n", chipid.chipid);
+		return -EINVAL;
+	}
+	return 0;
+}
+
+static int tc358870_enable(struct udevice *dev)
+{
+	int ret;
+	struct tc358870_priv *priv = dev_get_priv(dev);
+
+	/* Reset */
+	dm_gpio_set_value(&priv->bridge_reset, true);
+	udelay(10);
+	dm_gpio_set_value(&priv->bridge_reset, false);
+	mdelay(100);
+
+	dm_gpio_set_value(&priv->panel_reset, true);
+	udelay(10);
+	dm_gpio_set_value(&priv->panel_reset, false);
+	mdelay(200);
+
+	ret = tc358870_check_chipid(dev);
+	if (ret) return -EINVAL;
+
+	tc358870_dsi_init(dev);
+	ret = tc358870_panel_init(dev);
+	if (ret < 0) return ret;
+
+	return 0;
+}
+
+static int tc358870_probe(struct udevice *dev)
+{
+	int ret;
+	struct udevice *reg;
+
+	struct tc358870_priv *priv = dev_get_priv(dev);
+	struct panel_detector_priv *uc_priv = dev_get_uclass_priv(dev);
+
+	if (device_get_uclass_id(dev->parent) != UCLASS_I2C)
+		return -EPROTONOSUPPORT;
+
+	ret = gpio_request_by_name(dev, "bridge-reset-gpios", 0, &priv->bridge_reset,
+				   GPIOD_IS_OUT | GPIOD_IS_OUT_ACTIVE);
+	if (ret) {
+		dev_err(dev, "%s: Could not decode bridge-reset-gpios (%d)\n", __func__, ret);
+		if (ret != -ENOENT)
+			return ret;
+	}
+
+	ret = gpio_request_by_name(dev, "panel-reset-gpios", 0, &priv->panel_reset,
+				   GPIOD_IS_OUT | GPIOD_IS_OUT_ACTIVE);
+	if (ret) {
+		dev_err(dev, "%s: Could not decode panel-reset-gpios (%d)\n", __func__, ret);
+		if (ret != -ENOENT)
+			return ret;
+	}
+
+	ret = uclass_get_device_by_phandle(UCLASS_REGULATOR, dev,
+					   "avdd_lcd-supply", &reg);
+	if (!ret) {
+		ret = regulator_set_enable(reg, true);
+		if (ret < 0) {
+			dev_err(dev, "%s: Failed to enable power: ret=%d\n", __func__, ret);
+			return ret;
+		}
+	} else if (ret != -ENOENT) {
+		dev_err(dev, "%s: Failed to enable power: ret=%d\n", __func__, ret);
+		return ret;
+	}
+
+	uc_priv->panel_name = "";
+	return tc358870_enable(dev);
+}
+
+static const struct udevice_id tc358870_ids[] = {
+	{ .compatible = "toshiba,tc358870", },
+	{ }
+};
+
+U_BOOT_DRIVER(toshiba_tc358870) = {
+	.name	= "toshiba_tc358870",
+	.id	= UCLASS_PANEL_DETECTOR,
+	.of_match = tc358870_ids,
+	.probe	= tc358870_probe,
+	.priv_auto_alloc_size = sizeof(struct tc358870_priv),
+};
diff --git a/board/sunxi/tc358870.h b/board/sunxi/tc358870.h
new file mode 100644
index 0000000000..2ea0e1e643
--- /dev/null
+++ b/board/sunxi/tc358870.h
@@ -0,0 +1,88 @@
+#ifndef TC358870_H
+#define TC358870_H
+
+enum {
+	/* Global Control */
+	ChipID			= 0x0000u,
+	SysCtl			= 0x0002u,
+	ConfCtl0		= 0x0004u,
+	ConfCtl1		= 0x0006u,
+	/* DSI-TX0 TX Control */
+	DSITX_CLKEN		= 0x0108u,
+	PPI_CLKSEL		= 0x010cu,
+	MODE_CONFIG		= 0x0110u,
+	LANE_ENABLE		= 0x0118u,
+	DSITX_START		= 0x011cu,
+	LINE_INIT_COUNT		= 0x0120u,
+	HSTX_TO_COUNT		= 0x0124u,
+	FUNC_ENABLE		= 0x0128u,
+	DSI_TATO_COUNT		= 0x0130u,
+	DSI_PRESP_BTA_COUNT	= 0x0134u,
+	DSI_PRESP_LPR_COUNT	= 0x0138u,
+	DSI_PRESP_LPW_COUNT	= 0x013cu,
+	DSI_PRESP_HSR_COUNT	= 0x0140u,
+	DSI_PRESP_HSW_COUNT	= 0x0144u,
+	DSI_PR_TO_COUNT		= 0x0148u,
+	DSI_LRX_H_TO_COUNT	= 0x014cu,
+	FUNC_MODE		= 0x0150u,
+	DSIRX_VC_ENABLE		= 0x0154u,
+	IND_TO_COUNT		= 0x0158u,
+	INIT_INT_STAT		= 0x0160u,
+	DSI_HSYNC_STOP_COUNT	= 0x0168u,
+	/* DSI-TX0 APF Configuration */
+	APF_VDELAYCNT		= 0x0170u,
+	DSITX_MODE		= 0x017cu,
+	DSI_HSYNC_WIDTH		= 0x018cu,
+	DSI_HBPR		= 0x0190u,
+	/* DSI-TX0 RX Event */
+	RX_STATE_INT_STAT	= 0x01a0u,
+	DSI_RX_STATE_INT_MASK	= 0x01a4u,
+	TX_INTERNAL_STAT	= 0x01b0u,
+	ACKERROR		= 0x01b4u,
+	RXFIFO			= 0x01b8u,
+	RX_HEADER		= 0x01bcu,
+	LPRX_FIFO_LEVEL		= 0x01c4u,
+	DSI_LPRX_THRESH_COUNT	= 0x01c0u,
+	DSI_PRTO_INT_STAT	= 0x0208u,
+	APP_SIDE_ERR_INT_STAT	= 0x0210u,
+	APP_SIDE_ERR_INT_MASK	= 0x0214u,
+	DSI_RX_ERR_INT_STAT	= 0x0218u,
+	DSI_RX_ERR_INT_MASK	= 0x021cu,
+	/* DSI-TX0 LPTX */
+	DSI_LPTX_INT_MASK	= 0x0224u,
+	PPI_DPHY_LPRXCALCNTRL	= 0x0248u,
+	PPI_DPHY_LPRXAUTOCALST	= 0x024cu,
+	/* DSI-TX0 D-PHY Control */
+	PPI_DPHY_LPTXTIMECNT	= 0x0254u,
+	PPI_DPHY_TCLK_HEADERCNT	= 0x0258u,
+	PPI_DPHY_TCLK_TRAILCNT	= 0x025cu,
+	PPI_DPHY_THS_HEADERCNT	= 0x0260u,
+	PPI_DPHY_TWAKEUPCNT	= 0x0264u,
+	PPI_DPHY_TCLK_POSTCNT	= 0x0268u,
+	PPI_DPHY_THSTRAILCNT	= 0x026cu,
+	PPI_DPHY_HSTXVREGCNT	= 0x0270u,
+	PPI_DPHY_HSTXVREGEN	= 0x0274u,
+	PPI_DSI_BTA_COUNT	= 0x0278u,
+	PPI_DPHYTX_ADJUST	= 0x027cu,
+	PPI_DPHY_CAP		= 0x0288u,
+	/* DSI-TX0 MIPI PLL Control */
+	MIPI_PLL_CTRL		= 0x02a0u,
+	MIPI_PLL_CONF		= 0x02acu,
+	/* CDSI-TX Wrapper */
+	CMD_SEL			= 0x0500u,
+	DCSCMD_ST		= 0x0502u,
+	DCSCMD_Q		= 0x0504u,
+
+	/* HDMI RX Audio Control */
+	PHY_CTL			= 0x8410u,
+	PHY_ENB			= 0x8413u,
+	APLL_CTL		= 0x84f0u,
+	DDCIO_CTL		= 0x84f4u,
+	SYS_STATUS		= 0x8520u,
+	SYS_FREQ0		= 0x8540u,
+	SYS_FREQ1		= 0x8541u,
+	DDC_CTL			= 0x8543u,
+	HPD_CTL			= 0x8544u,
+};
+
+#endif
diff --git a/configs/prusa64-sl1_defconfig b/configs/prusa64-sl1_defconfig
index eaa2d33b52..63d8605b55 100644
--- a/configs/prusa64-sl1_defconfig
+++ b/configs/prusa64-sl1_defconfig
@@ -8,6 +8,9 @@ CONFIG_RESERVE_ALLWINNER_BOOT0_HEADER=y
 CONFIG_MMC_SUNXI_SLOT_EXTRA=2
 CONFIG_USB0_VBUS_DET="PH6"
 CONFIG_USB0_ID_DET="PH9"
+CONFIG_I2C0_ENABLE=y
+# CONFIG_VIDEO_DE2 is not set
+CONFIG_BRIDGED_PANEL_DETECTION=y
 # CONFIG_PSCI_RESET is not set
 # CONFIG_DISTRO_DEFAULTS is not set
 CONFIG_ENV_VARS_UBOOT_CONFIG=y
@@ -47,9 +50,10 @@ CONFIG_ENV_IS_IN_MMC=y
 CONFIG_ENV_FAT_DEVICE_AND_PART="0:1"
 # CONFIG_NET is not set
 CONFIG_DM_REGULATOR=y
+CONFIG_DM_REGULATOR_FIXED=y
 CONFIG_DM_PWM=y
 CONFIG_PWM_SUNXI=y
-# CONFIG_VIDEO_DT_SIMPLEFB is not set
+CONFIG_DM_VIDEO=y
 CONFIG_REGEX=y
 # CONFIG_EFI_LOADER is not set
 CONFIG_SUPPORT_EMMC_BOOT=y
diff --git a/include/configs/sunxi-common.h b/include/configs/sunxi-common.h
index 99bc430cf6..233c15b920 100644
--- a/include/configs/sunxi-common.h
+++ b/include/configs/sunxi-common.h
@@ -483,8 +483,8 @@ extern int soft_i2c_gpio_scl;
 	"\0"
 
 #define PRUSA_KERNEL_CMDLINE \
-	"rootwait panic=10 video=HDMI-A-1:D drm.edid_firmware=HDMI-A-1:edid/ls055r1sx04_148.5mhz.bin " \
-	"vt.global_cursor_default=0 console=${console} board_revision=${board_revision} stmmac.quirks=${eth_quirks}"
+	"rootwait panic=10 video=HDMI-A-1:D ${edid_bootarg} vt.global_cursor_default=0 " \
+	"console=${console} board_revision=${board_revision} stmmac.quirks=${eth_quirks}"
 
 
 #define BOOTCMD_PRUSA \
diff --git a/include/dm/uclass-id.h b/include/dm/uclass-id.h
index 0c563d898b..5d845bc511 100644
--- a/include/dm/uclass-id.h
+++ b/include/dm/uclass-id.h
@@ -71,6 +71,7 @@ enum uclass_id {
 	UCLASS_NVME,		/* NVM Express device */
 	UCLASS_PANEL,		/* Display panel, such as an LCD */
 	UCLASS_PANEL_BACKLIGHT,	/* Backlight controller for panel */
+	UCLASS_PANEL_DETECTOR,
 	UCLASS_PCH,		/* x86 platform controller hub */
 	UCLASS_PCI,		/* PCI bus */
 	UCLASS_PCI_EP,		/* PCI endpoint device */
-- 
2.30.0

