From 4a38392bd2ab260cc8b12d8d8a2d541f3fd2f531 Mon Sep 17 00:00:00 2001
From: Roman Beranek <roman.beranek@prusa3d.com>
Date: Fri, 18 Sep 2020 12:26:21 +0000
Subject: [PATCH 1/6] boot-process

---
 board/sunxi/board.c            | 3 ++-
 include/configs/sunxi-common.h | 7 +++----
 2 files changed, 5 insertions(+), 5 deletions(-)

diff --git a/board/sunxi/board.c b/board/sunxi/board.c
index 21651a1bfc..5a0d369ae1 100644
--- a/board/sunxi/board.c
+++ b/board/sunxi/board.c
@@ -213,6 +213,7 @@ void i2c_init_board(void)
 #if defined(CONFIG_ENV_IS_IN_MMC) && defined(CONFIG_ENV_IS_IN_FAT)
 enum env_location env_get_location(enum env_operation op, int prio)
 {
+	gd->env_load_prio = prio;
 	switch (prio) {
 	case 0:
 		return ENVL_FAT;
@@ -978,7 +978,7 @@ int misc_init_r(void)
 	/* Set fdtfile to match the FIT configuration chosen in SPL. */
 	spl_dt_name = get_spl_dt_name();
 	if (spl_dt_name) {
-		char *prefix = IS_ENABLED(CONFIG_ARM64) ? "allwinner/" : "";
+		char *prefix = "";
 		char str[64];
 
 		snprintf(str, sizeof(str), "%s%s.dtb", prefix, spl_dt_name);
diff --git a/include/configs/sunxi-common.h b/include/configs/sunxi-common.h
index 9e37e99684..ade3a6934a 100644
--- a/include/configs/sunxi-common.h
+++ b/include/configs/sunxi-common.h
@@ -443,11 +443,9 @@ extern int soft_i2c_gpio_scl;
 	CONSOLE_STDIN_SETTINGS \
 	CONSOLE_STDOUT_SETTINGS
 
-#ifdef CONFIG_ARM64
-#define FDTFILE "allwinner/" CONFIG_DEFAULT_DEVICE_TREE ".dtb"
-#else
 #define FDTFILE CONFIG_DEFAULT_DEVICE_TREE ".dtb"
-#endif
+
+#include <configs/sunxi-prusa.h>
 
 #define CONFIG_EXTRA_ENV_SETTINGS \
 	CONSOLE_ENV_SETTINGS \
@@ -462,6 +460,7 @@ extern int soft_i2c_gpio_scl;
 	"uuid_gpt_system=" UUID_GPT_SYSTEM "\0" \
 	"partitions=" PARTS_DEFAULT "\0" \
 	BOOTCMD_SUNXI_COMPAT \
+	PRUSA_ENV_SETTINGS \
 	BOOTENV
 
 #else /* ifndef CONFIG_SPL_BUILD */
-- 
2.34.0


From 1427feb877504dc300540835be3a8320f18b655b Mon Sep 17 00:00:00 2001
From: Roman Beranek <roman.beranek@prusa3d.com>
Date: Fri, 18 Sep 2020 12:26:21 +0000
Subject: [PATCH 2/6] mmc-legacy-only

---
 drivers/mmc/sunxi_mmc.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/drivers/mmc/sunxi_mmc.c b/drivers/mmc/sunxi_mmc.c
index 3503ccdb2e..d94a867a28 100644
--- a/drivers/mmc/sunxi_mmc.c
+++ b/drivers/mmc/sunxi_mmc.c
@@ -628,7 +628,7 @@ static int sunxi_mmc_probe(struct udevice *dev)
 		cfg->host_caps |= MMC_MODE_8BIT;
 	if (bus_width >= 4)
 		cfg->host_caps |= MMC_MODE_4BIT;
-	cfg->host_caps |= MMC_MODE_HS_52MHz | MMC_MODE_HS;
+	cfg->host_caps |= MMC_CAP(MMC_LEGACY);
 	cfg->b_max = CONFIG_SYS_MMC_MAX_BLK_COUNT;
 
 	cfg->f_min = 400000;
-- 
2.34.0


From 16617eba349b79cb9bdd686a3306796f03e43d2b Mon Sep 17 00:00:00 2001
From: Roman Beranek <roman.beranek@prusa3d.com>
Date: Fri, 18 Sep 2020 12:26:21 +0000
Subject: [PATCH 3/6] mmc-delay-1500

---
 board/sunxi/board.c | 5 +++++
 1 file changed, 5 insertions(+)

diff --git a/board/sunxi/board.c b/board/sunxi/board.c
index 5a0d369ae1..60c7036a43 100644
--- a/board/sunxi/board.c
+++ b/board/sunxi/board.c
@@ -610,6 +610,11 @@ int board_mmc_init(struct bd_info *bis)
 {
 	__maybe_unused struct mmc *mmc0, *mmc1;
 
+        // TODO:
+        // HACK:
+        // This is a hack for MMC read problems on prusa-sl1 A64 board
+        mdelay(1500);
+
 	mmc_pinmux_setup(CONFIG_MMC_SUNXI_SLOT);
 	mmc0 = sunxi_mmc_init(CONFIG_MMC_SUNXI_SLOT);
 	if (!mmc0)
-- 
2.34.0


From cf27706b0bb23380e17599f1148bf260c1a414a8 Mon Sep 17 00:00:00 2001
From: Andrey Yurovsky <yurovsky@gmail.com>
Date: Wed, 13 Dec 2017 21:06:49 -0800
Subject: [PATCH 4/6] gpt: add part-uuid and part-num subcommands

It is useful to be able to retrieve a partition UUID or number given the
partition label when working with disks that have a GPT. For instance
some systems use the partition label to indicate the purpose of the
partition (such as "rootfs0" being the 0th root file system in an A/B
image scheme).

Add "gpt part-uuid" to retrieve the partition UUID for a given label and
"gpt part-num" to retrieve the partition number for a given label along
with some documentation.

Signed-off-by: Andrey Yurovsky <yurovsky@gmail.com>
---
 cmd/gpt.c      | 75 ++++++++++++++++++++++++++++++++++++++++++++++++++
 doc/README.gpt | 21 ++++++++++++++
 2 files changed, 96 insertions(+)

diff --git a/cmd/gpt.c b/cmd/gpt.c
index 17f2b839d7..1f0930c42c 100644
--- a/cmd/gpt.c
+++ b/cmd/gpt.c
@@ -393,6 +393,72 @@ static int do_get_gpt_info(struct blk_desc *dev_desc, char * const namestr)
 }
 #endif
 
+static struct disk_part *find_part_by_label(const char *label)
+{
+	struct disk_part *part = NULL;
+	struct disk_part *curr;
+
+	list_for_each_entry(curr, &disk_partitions, list) {
+		/* Check for the first match of the label we're looking
+		* for against the partition label
+		*/
+		if (!strcmp((const char *)curr->gpt_part_info.name,
+			   label)) {
+			part = curr;
+			break;
+		}
+	}
+
+	return part;
+}
+
+/**
+ * Find a partition UUID by label and save that UUID to the environment
+ * variable specified
+ */
+static int do_get_part_uuid(struct blk_desc *dev_desc, const char *label,
+			   const char *namestr)
+{
+	int ret;
+
+	ret = get_gpt_info(dev_desc);
+	if (ret > 0) {
+		struct disk_part *part = find_part_by_label(label);
+
+		if (part) {
+			env_set(namestr, part->gpt_part_info.uuid);
+			ret = 0;
+		}
+
+		del_gpt_info();
+	}
+
+	return ret;
+}
+
+/**
+ * Find a partition number by label and save that number to the environment
+ * variable specified
+ */
+static int do_get_part_num(struct blk_desc *dev_desc, const char *label,
+			  const char *namestr)
+{
+	int ret = get_gpt_info(dev_desc);
+
+	if (ret > 0) {
+		struct disk_part *part = find_part_by_label(label);
+
+		if (part) {
+			env_set_ulong(namestr, part->partnum);
+			ret = 0;
+		}
+
+		del_gpt_info();
+	}
+
+	return ret;
+}
+
 /**
  * set_gpt_info(): Fill partition information from string
  *		function allocates memory, remember to free!
@@ -1007,6 +1073,10 @@ static int do_gpt(struct cmd_tbl *cmdtp, int flag, int argc, char *const argv[])
 		ret = gpt_setenv(blk_dev_desc, argv[4]);
 	} else if ((strcmp(argv[1], "enumerate") == 0)) {
 		ret = gpt_enumerate(blk_dev_desc);
+	} else if (strcmp(argv[1], "part-uuid") == 0 && argc == 6) {
+		ret = do_get_part_uuid(blk_dev_desc, argv[4], argv[5]);
+	} else if (strcmp(argv[1], "part-num") == 0 && argc == 6) {
+		ret = do_get_part_num(blk_dev_desc, argv[4], argv[5]);
 	} else if (strcmp(argv[1], "guid") == 0) {
 		ret = do_disk_guid(blk_dev_desc, argv[4]);
 #ifdef CONFIG_CMD_GPT_RENAME
@@ -1056,6 +1126,11 @@ U_BOOT_CMD(gpt, CONFIG_SYS_MAXARGS, 1, do_gpt,
 	" gpt guid mmc 0\n"
 	" gpt guid mmc 0 varname\n"
 #ifdef CONFIG_CMD_GPT_RENAME
+	"gpt partition label commands:\n"
+	"gpt part-uuid <interface> <dev> <label> <varname>\n"
+	"    - set environment variable to UUID of label\n"
+	"gpt part-num <interface> <dev> <label> <varname>\n"
+	"    - set environment variable to partition number of label\n"
 	"gpt partition renaming commands:\n"
 	" gpt read <interface> <dev> [<varname>]\n"
 	"    - read GPT into a data structure for manipulation\n"
diff --git a/doc/README.gpt b/doc/README.gpt
index 91e397d06f..218f48a7a5 100644
--- a/doc/README.gpt
+++ b/doc/README.gpt
@@ -292,6 +292,27 @@ Some strings can be also used at the place of known GUID :
 
 They are also used to display the type of partition in "part list" command.
 
+Identifying Partitions in U-Boot:
+=================================
+
+Two subcommands may be used to identify partitions by their label. This can be
+useful for determining which partition to use or for setting boot arguments.
+The 'gpt part-uuid' command looks up a partition UUID for a given label and
+stores it in an environment variable. The 'gpt part-num' command looks up a
+partition number for a given label and stores it in an environment variable.
+The first partition with a matching label is used.
+
+For example, to find the UUID of a partition named 'rootfs0' and then use it
+for boot arguments:
+
+U-BOOT> gpt part-uuid mmc 0 rootfs0 rootfsuuid
+U-BOOT> setenv bootargs root=PARTUUID=${rootfsuuid}
+
+Or, for example, to find the partition number for a partition named 'kernel'
+and load a file from it:
+
+U-BOOT> gpt part-num mmc 0 kernel kernelnum
+U-BOOT> fatload mmc 0:${kernelnum} ${loadaddr} zImage
 
 Useful info:
 ============
-- 
2.34.0


From 472ba7fb5139115905a89bbee34141c4e3e587b9 Mon Sep 17 00:00:00 2001
From: Roman Beranek <roman.beranek@prusa3d.com>
Date: Thu, 22 Apr 2021 17:02:51 +0200
Subject: [PATCH 5/6] rauc update: toggle eMMC bootpart on slot flip

- added new subcommand 'mmc toggle-bootpart'
- update_active_rootfs_slot kept backward-compatible with u-boot
  lacking aforementioned command
---
 cmd/mmc.c | 48 ++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 48 insertions(+)

diff --git a/cmd/mmc.c b/cmd/mmc.c
index b942576b58..5ef6ba0778 100644
--- a/cmd/mmc.c
+++ b/cmd/mmc.c
@@ -864,6 +864,51 @@ static int do_mmc_partconf(struct cmd_tbl *cmdtp, int flag,
 	return mmc_set_part_conf(mmc, ack, part_num, access);
 }
 
+int mmc_switch(struct mmc *mmc, u8 set, u8 index, u8 value);
+
+static int do_mmc_toggle_bootpart(struct cmd_tbl *cmdtp, int flag,
+				 int argc, char * const argv[])
+{
+	int dev, ret;
+	u8 part, part_conf;
+	struct mmc *mmc;
+
+	dev = (int)simple_strtoul(argv[1], NULL, 10);
+	mmc = init_mmc_device(dev, false);
+	if (!mmc)
+		return CMD_RET_FAILURE;
+
+	if (IS_SD(mmc)) {
+		puts("PARTITION_CONFIG only exists on eMMC\n");
+		return CMD_RET_FAILURE;
+	}
+
+	if (mmc->part_config == MMCPART_NOAVAILABLE) {
+		printf("No part_config info for ver. 0x%x\n", mmc->version);
+		return CMD_RET_FAILURE;
+	}
+
+	part = EXT_CSD_EXTRACT_BOOT_PART(mmc->part_config);
+	if (part < 1 || part > 2) {
+		printk("Neither BP1 nor BP2 is set as bootpart (%d), doing nothing.\n", part);
+		return CMD_RET_FAILURE;
+	}
+
+	part_conf = mmc->part_config;
+
+	part = part == 2 ? 1 : 2;
+	part_conf = (part_conf & ~EXT_CSD_BOOT_PART_NUM(0x7)) | EXT_CSD_BOOT_PART_NUM(part);
+	ret = mmc_switch(mmc, EXT_CSD_CMD_SET_NORMAL, EXT_CSD_PART_CONF, part_conf);
+
+	if (ret < 0) {
+		printk("eMMC bootpart switch failed: %d\n", ret);
+		return CMD_RET_FAILURE;
+	}
+
+	mmc->part_config = part_conf;
+	return CMD_RET_SUCCESS;
+}
+
 static int do_mmc_rst_func(struct cmd_tbl *cmdtp, int flag,
 			   int argc, char *const argv[])
 {
@@ -994,6 +1039,7 @@ static struct cmd_tbl cmd_mmc[] = {
 	U_BOOT_CMD_MKENT(bootbus, 5, 0, do_mmc_bootbus, "", ""),
 	U_BOOT_CMD_MKENT(bootpart-resize, 4, 0, do_mmc_boot_resize, "", ""),
 	U_BOOT_CMD_MKENT(partconf, 5, 0, do_mmc_partconf, "", ""),
+	U_BOOT_CMD_MKENT(toggle-bootpart, 2, 0, do_mmc_toggle_bootpart, "", ""),
 	U_BOOT_CMD_MKENT(rst-function, 3, 0, do_mmc_rst_func, "", ""),
 #endif
 #if CONFIG_IS_ENABLED(CMD_MMC_RPMB)
@@ -1067,6 +1113,8 @@ U_BOOT_CMD(
 	"mmc partconf <dev> [[varname] | [<boot_ack> <boot_partition> <partition_access>]]\n"
 	" - Show or change the bits of the PARTITION_CONFIG field of the specified device\n"
 	"   If showing the bits, optionally store the boot_partition field into varname\n"
+	"mmc toggle-bootpart dev\n"
+	" - If one of the two boot partitions is enabled, switch to the other one\n"
 	"mmc rst-function <dev> <value>\n"
 	" - Change the RST_n_FUNCTION field of the specified device\n"
 	"   WARNING: This is a write-once field and 0 / 1 / 2 are the only valid values.\n"
-- 
2.34.0


From 5e50dc3150460fd142dd6f4ffdd0b817de5fc888 Mon Sep 17 00:00:00 2001
From: Roman Beranek <roman.beranek@prusa3d.com>
Date: Mon, 12 Jul 2021 15:44:37 +0200
Subject: [PATCH 6/6] env: reset defaults on load

---
 env/Kconfig  | 7 +++++++
 env/common.c | 4 ++++
 2 files changed, 11 insertions(+)

diff --git a/env/Kconfig b/env/Kconfig
index 1411f9e815..7cc81c36b1 100644
--- a/env/Kconfig
+++ b/env/Kconfig
@@ -712,6 +712,13 @@ config ENV_ACCESS_IGNORE_FORCE
 	  If defined, don't allow the -f switch to env set override variable
 	  access flags.
 
+config ENV_RESET_DEFAULTS_ON_LOAD
+	bool "Keep environment fresh"
+	help
+	  Once an environment is loaded from the eMMC, reset it to
+	  defaults. This will keep variables without default values
+	  as they were.
+
 if SPL_ENV_SUPPORT
 config SPL_ENV_IS_NOWHERE
 	bool "SPL Environment is not stored"
diff --git a/env/common.c b/env/common.c
index 81e9e0b2aa..4fa171f4a2 100644
--- a/env/common.c
+++ b/env/common.c
@@ -257,6 +257,10 @@ void env_relocate(void)
 #endif
 	} else {
 		env_load();
+#if defined(CONFIG_ENV_RESET_DEFAULTS_ON_LOAD) && !defined(CONFIG_SPL_BUILD)
+		printf("Resetting environment variables.\n");
+		env_set_default_vars(0, NULL, 0);
+#endif
 	}
 }
 
-- 
2.34.0

