From e4ccf20d8e0963c586d68be638e2b82f664a8cc0 Mon Sep 17 00:00:00 2001
From: Roman Beranek <roman.beranek@prusa3d.com>
Date: Sat, 13 Nov 2021 18:24:44 +0100
Subject: [PATCH] send shdn cmd to mc during poweroff

---
 src/shared/meson.build         |  2 ++
 src/shared/prusa-mc-shdn.c     | 49 ++++++++++++++++++++++++++++++++++
 src/shared/prusa-mc-shdn.h     |  4 +++
 src/shutdown/shutdown.c        |  2 ++
 src/systemctl/systemctl-util.c |  2 ++
 5 files changed, 59 insertions(+)
 create mode 100644 src/shared/prusa-mc-shdn.c
 create mode 100644 src/shared/prusa-mc-shdn.h

diff --git a/src/shared/meson.build b/src/shared/meson.build
index 7eb7050062..7e8829caf1 100644
--- a/src/shared/meson.build
+++ b/src/shared/meson.build
@@ -232,6 +232,8 @@ shared_sources = files('''
         pkcs11-util.h
         pretty-print.c
         pretty-print.h
+        prusa-mc-shdn.c
+        prusa-mc-shdn.h
         psi-util.c
         psi-util.h
         ptyfwd.c
diff --git a/src/shared/prusa-mc-shdn.c b/src/shared/prusa-mc-shdn.c
new file mode 100644
index 0000000000..654cacc42f
--- /dev/null
+++ b/src/shared/prusa-mc-shdn.c
@@ -0,0 +1,49 @@
+#include <fcntl.h>
+#include <stdlib.h>
+#include <string.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <termios.h>
+#include <unistd.h>
+
+#include "log.h"
+#include "prusa-mc-shdn.h"
+
+static int mc_connect(void)
+{
+        struct termios options;
+        int fd = open("/dev/ttyS2", O_RDWR | O_NOCTTY | O_NDELAY);
+        if (fd == -1) return -1;
+
+        memset(&options, 0, sizeof(options));
+        options.c_cflag = (CS8 | CLOCAL | CREAD); /* 8N1, ignore modem lines,
+                                                     receive */
+        options.c_iflag = IGNPAR; /* Ignore bytes with parity errors */
+        options.c_oflag = 0; /* Raw output */
+        options.c_lflag = ICANON; /* Canonical input */
+
+        tcflush(fd, TCIFLUSH);
+        cfsetospeed(&options, B115200);
+        cfsetispeed(&options, B115200);
+        tcsetattr(fd, TCSANOW, &options);
+
+        return fd;
+}
+
+int mc_send_shutdown_command(void)
+{
+        int fd;
+        log_info("Initializing UART connection to the Motion Controller.");
+        fd = mc_connect();
+        if (fd <= 0) {
+                log_error("Couldn't open MC UART.");
+                return 1;
+        }
+
+        write(fd, "!shdn 1\n", 9); /* a command to shutdown within 1 second */
+        usleep(9 * 100UL); /* sending 1 charachter takes approx. 100 us */
+        log_info("Shutdown command has been transmitted to the Motion Controller.");
+        close(fd);
+
+        return 0;
+}
diff --git a/src/shared/prusa-mc-shdn.h b/src/shared/prusa-mc-shdn.h
new file mode 100644
index 0000000000..09fd50e445
--- /dev/null
+++ b/src/shared/prusa-mc-shdn.h
@@ -0,0 +1,4 @@
+/* SPDX-License-Identifier: LGPL-2.1+ */
+#pragma once
+
+int mc_send_shutdown_command(void);
diff --git a/src/shutdown/shutdown.c b/src/shutdown/shutdown.c
index a98cfc4d8a..2baa1e6b06 100644
--- a/src/shutdown/shutdown.c
+++ b/src/shutdown/shutdown.c
@@ -27,6 +27,7 @@
 #include "log.h"
 #include "parse-util.h"
 #include "process-util.h"
+#include "prusa-mc-shdn.h"
 #include "reboot-util.h"
 #include "rlimit-util.h"
 #include "signal-util.h"
@@ -602,6 +603,7 @@ int main(int argc, char *argv[]) {
                 break;
 
         case RB_POWER_OFF:
+                (void) mc_send_shutdown_command();
                 log_info("Powering off.");
                 break;
 
diff --git a/src/systemctl/systemctl-util.c b/src/systemctl/systemctl-util.c
index 99f1394bcf..3b12014f90 100644
--- a/src/systemctl/systemctl-util.c
+++ b/src/systemctl/systemctl-util.c
@@ -17,6 +17,7 @@
 #include "glob-util.h"
 #include "macro.h"
 #include "path-util.h"
+#include "prusa-mc-shdn.h"
 #include "reboot-util.h"
 #include "set.h"
 #include "spawn-ask-password-agent.h"
@@ -920,6 +921,7 @@ int halt_now(enum action a) {
                         log_info("Powering off.");
                 if (arg_dry_run)
                         return 0;
+                (void) mc_send_shutdown_command();
                 (void) reboot(RB_POWER_OFF);
                 return -errno;
 
-- 
2.33.1

