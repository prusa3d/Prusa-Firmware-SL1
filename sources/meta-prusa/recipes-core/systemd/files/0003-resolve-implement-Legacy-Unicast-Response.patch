From 954d853a30ce037133e8b18394b38b3a823608a0 Mon Sep 17 00:00:00 2001
From: Roman Beranek <roman.beranek@prusa3d.com>
Date: Mon, 9 Nov 2020 18:15:24 +0100
Subject: [PATCH] resolve: implement Legacy Unicast Response

---
 src/resolve/resolved-dns-zone.c | 33 +++++++++++++++++++++
 src/resolve/resolved-mdns.c     | 51 +++++++++++++++++++++++++++++----
 2 files changed, 79 insertions(+), 5 deletions(-)

diff --git a/src/resolve/resolved-dns-zone.c b/src/resolve/resolved-dns-zone.c
index d5cc2767d7..5419ca0811 100644
--- a/src/resolve/resolved-dns-zone.c
+++ b/src/resolve/resolved-dns-zone.c
@@ -307,6 +307,7 @@ static int dns_zone_add_authenticated_answer(DnsAnswer *a, DnsZoneItem *i, int i
 
 int dns_zone_lookup(DnsZone *z, DnsResourceKey *key, int ifindex, DnsAnswer **ret_answer, DnsAnswer **ret_soa, bool *ret_tentative) {
         _cleanup_(dns_answer_unrefp) DnsAnswer *answer = NULL, *soa = NULL;
+        _cleanup_(dns_resource_key_unrefp) DnsResourceKey *ptr_key = NULL;
         unsigned n_answer = 0;
         DnsZoneItem *j, *first;
         bool tentative = true, need_soa = false;
@@ -342,8 +343,23 @@ int dns_zone_lookup(DnsZone *z, DnsResourceKey *key, int ifindex, DnsAnswer **re
                         if (k > 0) {
                                 n_answer++;
                                 added = true;
+                                if (dns_resource_key_is_dnssd_ptr(j->rr->key))
+                                        ptr_key = dns_resource_key_new(DNS_CLASS_ANY, DNS_TYPE_ANY, j->rr->ptr.name);
                         }
+                }
+                if (ptr_key) {
+                        first = hashmap_get(z->by_name, dns_resource_key_name(ptr_key));
+                        LIST_FOREACH (by_name, j, first) {
+                                if (!IN_SET(j->state, DNS_ZONE_ITEM_PROBING, DNS_ZONE_ITEM_ESTABLISHED, DNS_ZONE_ITEM_VERIFYING))
+                                        continue;
 
+                                k = dns_resource_key_match_rr(ptr_key, j->rr, NULL);
+                                if (k < 0)
+                                        return k;
+                                if (k > 0) {
+                                        n_answer++;
+                                }
+                        }
                 }
 
                 if (found && !added)
@@ -418,6 +434,23 @@ int dns_zone_lookup(DnsZone *z, DnsResourceKey *key, int ifindex, DnsAnswer **re
                         }
                 }
 
+                if (ptr_key) {
+                        first = hashmap_get(z->by_name, dns_resource_key_name(ptr_key));
+                        LIST_FOREACH (by_name, j, first) {
+                                if (!IN_SET(j->state, DNS_ZONE_ITEM_PROBING, DNS_ZONE_ITEM_ESTABLISHED, DNS_ZONE_ITEM_VERIFYING))
+                                        continue;
+
+                                k = dns_resource_key_match_rr(ptr_key, j->rr, NULL);
+                                if (k < 0)
+                                        return k;
+                                if (k > 0) {
+                                        r = dns_zone_add_authenticated_answer(answer, j, ifindex);
+                                        if (r < 0)
+                                                return r;
+                                }
+                        }
+                }
+
                 if (found && !added) {
                         r = dns_answer_add_soa(soa, dns_resource_key_name(key), LLMNR_DEFAULT_TTL, ifindex);
                         if (r < 0)
diff --git a/src/resolve/resolved-mdns.c b/src/resolve/resolved-mdns.c
index eba2978991..57d1f38d6f 100644
--- a/src/resolve/resolved-mdns.c
+++ b/src/resolve/resolved-mdns.c
@@ -173,12 +173,37 @@ static int mdns_do_tiebreak(DnsResourceKey *key, DnsAnswer *answer, DnsPacket *p
         return 0;
 }
 
+static int mdns_scope_send_unicast(DnsScope *s, DnsPacket *p) {
+        int r, fd;
+
+        assert(s);
+        assert(p);
+        assert(p->protocol == s->protocol);
+
+        if (!ratelimit_below(&s->ratelimit))
+                return -EBUSY;
+
+        if (p->family == AF_INET) {
+                fd = manager_mdns_ipv4_fd(s->manager);
+        } else if (p->family == AF_INET6) {
+                fd = manager_mdns_ipv6_fd(s->manager);
+        } else
+                return -EAFNOSUPPORT;
+
+        r = manager_send(s->manager, fd, s->link->ifindex, p->family, &p->destination, p->destination_port, NULL, p);
+        if (r < 0)
+                return r;
+
+        return 0;
+}
+
 static int mdns_scope_process_query(DnsScope *s, DnsPacket *p) {
         _cleanup_(dns_answer_unrefp) DnsAnswer *full_answer = NULL;
         _cleanup_(dns_packet_unrefp) DnsPacket *reply = NULL;
         DnsResourceKey *key = NULL;
         DnsResourceRecord *rr;
         bool tentative = false;
+        bool is_legacy = p->sender_port != MDNS_PORT;
         int r;
 
         assert(s);
@@ -230,17 +255,33 @@ static int mdns_scope_process_query(DnsScope *s, DnsPacket *p) {
         if (dns_answer_isempty(full_answer))
                 return 0;
 
+        if (is_legacy)
+                for (int j = 0; j < full_answer->n_rrs; ++j) {
+                        full_answer->items[j].flags &= ~DNS_ANSWER_CACHE_FLUSH;
+                        full_answer->items[j].rr->ttl = 10;
+                }
+
-        r = dns_scope_make_reply_packet(s, DNS_PACKET_ID(p), DNS_RCODE_SUCCESS, NULL, full_answer, NULL, false, &reply);
+        r = dns_scope_make_reply_packet(s, DNS_PACKET_ID(p), DNS_RCODE_SUCCESS, is_legacy ? p->question : NULL, full_answer, NULL, false, &reply);
+
         if (r < 0)
                 return log_debug_errno(r, "Failed to build reply packet: %m");
 
         if (!ratelimit_below(&s->ratelimit))
                 return 0;
 
-        r = dns_scope_emit_udp(s, -1, reply);
-        if (r < 0)
-                return log_debug_errno(r, "Failed to send reply packet: %m");
-
+        if (is_legacy) {
+                reply->destination = p->sender;
+                reply->destination_port = p->sender_port;
+                reply->family = p->family;
+                r = mdns_scope_send_unicast(s, reply);
+                if (r < 0) {
+                        return log_debug_errno(r, "Failed to send unicast reply packet: %m");
+                }
+        } else {
+                r = dns_scope_emit_udp(s, -1, reply);
+                if (r < 0)
+                        return log_debug_errno(r, "Failed to send reply packet: %m");
+        }
         return 0;
 }
 
-- 
2.29.2

