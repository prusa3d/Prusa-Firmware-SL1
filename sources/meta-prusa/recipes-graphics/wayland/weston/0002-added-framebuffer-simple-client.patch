From b44e36aa3766198aa66bb0fd9b9fc278b3fb4dad Mon Sep 17 00:00:00 2001
From: Roman Beranek <roman.beranek@prusa3d.com>
Date: Tue, 13 Oct 2020 08:34:33 +0200
Subject: [PATCH 2/4] added framebuffer simple client

---
 clients/framebuffer.c | 508 ++++++++++++++++++++++++++++++++++++++++++
 clients/meson.build   |  12 +
 meson_options.txt     |   2 +-
 3 files changed, 521 insertions(+), 1 deletion(-)
 create mode 100644 clients/framebuffer.c

diff --git a/clients/framebuffer.c b/clients/framebuffer.c
new file mode 100644
index 00000000..86822573
--- /dev/null
+++ b/clients/framebuffer.c
@@ -0,0 +1,508 @@
+#include <errno.h>
+#include <fcntl.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <unistd.h>
+#include <linux/limits.h>
+#include <sys/mman.h>
+#include <sys/inotify.h>
+#include <sys/stat.h>
+
+#include <systemd/sd-bus.h>
+
+#include <wayland-client.h>
+#include <wayland-client-protocol.h>
+#include <wayland-server-protocol.h>
+
+#include "shared/helpers.h"
+#include "shared/timespec-util.h"
+#include "presentation-time-client-protocol.h"
+#include "xdg-shell-client-protocol.h"
+
+#define DBUS_SERVICE	"cz.prusa3d.framebuffer1"
+#define DBUS_PATH	"/cz/prusa3d/framebuffer1"
+#define DBUS_INTERFACE	DBUS_SERVICE ".Frame"
+#define DBUS_SIGNAL	"Ready"
+
+#define STRINGIFY(x) #x
+#define TOSTRING(x) STRINGIFY(x)
+#define AT __FILE__ ":" TOSTRING(__LINE__) " "
+
+struct client_state {
+	/* globals */
+	struct wl_display *display;
+	struct wl_registry *registry;
+	struct wl_shell *shell;
+	struct wl_shm *shm;
+	struct wl_compositor *compositor;
+	struct wp_presentation *presentation;
+	struct xdg_wm_base *xdg_wm_base;
+	/* objects */
+	struct wl_surface *surface;
+	struct xdg_surface *xdg_surface;
+	struct xdg_toplevel *xdg_toplevel;
+	struct wl_buffer *buffer;
+	struct wl_callback *frame_callback;
+	struct sd_bus *bus;
+	/* misc */
+	int fd;
+	int inotify_fd;
+	void *shm_data;
+	int width;
+	int height;
+	uint32_t mask;
+	uint32_t time;
+	int inotify_nonblock;
+	int pending_emit;
+	struct timespec commit;
+	struct timespec redraw;
+	struct timespec prev;
+	struct timespec present;
+	clockid_t clk_id;
+};
+
+static int open_sd_bus(sd_bus **bus)
+{
+	int r;
+	r = sd_bus_open_system(bus);
+	if (r < 0) {
+		fprintf(stderr, "Failed to connect to system bus: %s\n", strerror(-r));
+		return 1;
+	}
+
+	r = sd_bus_request_name(*bus, DBUS_SERVICE, 0);
+	if (r < 0) {
+		fprintf(stderr, "Failed to acquire service name: %s\n", strerror(-r));
+		return 1;
+	}
+	return 0;
+}
+
+static void emit_ready_signal(struct client_state *state)
+{
+	sd_bus_message *msg;
+	uint64_t cookie;
+	int r;
+
+	state->pending_emit = 0;
+	r = sd_bus_message_new_signal(state->bus, &msg, DBUS_PATH,
+				      DBUS_INTERFACE, DBUS_SIGNAL);
+	if (r < 0) {
+		fprintf(stderr, "Failed to create message for sd_bus: %s\n", strerror(-r));
+		return;
+	}
+
+	r = sd_bus_send(state->bus, msg, &cookie);
+	if (r < 0) {
+		fprintf(stderr, "Failed to emit a signal: %s)", strerror(-r));
+		return;
+	}
+}
+
+static void close_sd_bus(sd_bus *bus)
+{
+	sd_bus_release_name(bus, DBUS_SERVICE);
+	sd_bus_unref(bus);
+}
+
+int os_create_shm_file(off_t size)
+{
+	struct stat sb;
+	int fd = shm_open("/fb", O_RDWR | O_CREAT, S_IRUSR | S_IWUSR);
+
+	if (fd < 0)
+		return -1;
+
+	if (fstat(fd, &sb) < 0)
+		goto fail;
+
+	if (sb.st_size != size)
+		if (ftruncate(fd, size) < 0)
+			goto fail;
+
+	return fd;
+
+fail:
+	close(fd);
+	return -1;
+}
+
+static void
+feedback_sync_output(void *data,
+		     struct wp_presentation_feedback *presentation_feedback,
+		     struct wl_output *output)
+{
+	/* not interested */
+}
+
+static char *
+pflags_to_str(uint32_t flags, char *str, unsigned len)
+{
+	static const struct {
+		uint32_t flag;
+		char sym;
+	} desc[] = {
+		{ WP_PRESENTATION_FEEDBACK_KIND_VSYNC, 's' },
+		{ WP_PRESENTATION_FEEDBACK_KIND_HW_CLOCK, 'c' },
+		{ WP_PRESENTATION_FEEDBACK_KIND_HW_COMPLETION, 'e' },
+		{ WP_PRESENTATION_FEEDBACK_KIND_ZERO_COPY, 'z' },
+	};
+	unsigned i;
+
+	*str = '\0';
+	if (len < ARRAY_LENGTH(desc) + 1)
+		return str;
+
+	for (i = 0; i < ARRAY_LENGTH(desc); i++)
+		str[i] = (flags & desc[i].flag) ? desc[i].sym : '_';
+	str[ARRAY_LENGTH(desc)] = '\0';
+
+	return str;
+}
+
+static uint32_t
+timespec_to_ms(const struct timespec *ts)
+{
+	return (uint32_t)ts->tv_sec * 1000 + ts->tv_nsec / 1000000;
+}
+
+static long
+timespec_diff_to_usec(const struct timespec *a, const struct timespec *b)
+{
+	time_t secs = a->tv_sec - b->tv_sec;
+	long nsec = a->tv_nsec - b->tv_nsec;
+
+	return secs * 1000000 + nsec / 1000;
+}
+
+static void
+feedback_presented(void *data,
+		   struct wp_presentation_feedback *presentation_feedback,
+		   uint32_t tv_sec_hi,
+		   uint32_t tv_sec_lo,
+		   uint32_t tv_nsec,
+		   uint32_t refresh_nsec,
+		   uint32_t seq_hi,
+		   uint32_t seq_lo,
+		   uint32_t flags)
+{
+	struct client_state *state = data;
+	uint64_t seq = ((uint64_t)seq_hi << 32) + seq_lo;
+	long c2p, r2p;
+	uint32_t pres, prev, p2p;
+	char flagstr[10];
+
+	emit_ready_signal(state);
+
+	timespec_from_proto(&state->present, tv_sec_hi, tv_sec_lo, tv_nsec);
+
+	pres = timespec_to_ms(&state->present);
+	prev = timespec_to_ms(&state->prev);
+	p2p = pres - prev;
+
+	c2p = timespec_diff_to_usec(&state->present, &state->commit);
+	r2p = timespec_diff_to_usec(&state->present, &state->redraw);
+
+	printf("c2p %6ld us, r2p %6ld us, p2p %8u ms, [%s] "
+	       "seq %" PRIu64 "\n", c2p, r2p, p2p,
+	       pflags_to_str(flags, flagstr, sizeof(flagstr)), seq);
+
+	state->prev.tv_nsec = state->present.tv_nsec;
+	state->prev.tv_sec = state->present.tv_sec;
+	wp_presentation_feedback_destroy(presentation_feedback);
+}
+
+static void
+feedback_discarded(void *data,
+		   struct wp_presentation_feedback *presentation_feedback)
+{
+	printf("discarded\n");
+	wp_presentation_feedback_destroy(presentation_feedback);
+}
+
+static const struct wp_presentation_feedback_listener feedback_listener = {
+	feedback_sync_output,
+	feedback_presented,
+	feedback_discarded
+};
+
+int init_inotify(int nonblock)
+{
+	int fd;
+	fd = nonblock ? inotify_init1(IN_NONBLOCK) : inotify_init();
+	inotify_add_watch(fd, "/dev/shm/fb", IN_CLOSE_WRITE | IN_MODIFY);
+	return fd;
+}
+
+void wait_for_fb_write(struct client_state *state) {
+	struct inotify_event event = { 0 };
+	uint32_t mask = 0;
+	int length;
+
+	while (mask ^ (IN_CLOSE_WRITE | IN_MODIFY)) {
+		length = read(state->inotify_fd, &event, sizeof(struct inotify_event));
+		mask |= event.mask;
+		if (length < 0) perror("read");
+	}
+}
+
+int fb_needs_update(struct client_state *state)
+{
+	struct inotify_event event = { 0 };
+	int length;
+
+	length = read(state->inotify_fd, &event, sizeof(struct inotify_event));
+	if (length == -1) {
+		if (errno != EWOULDBLOCK) perror("read");
+		return 0;
+	}
+	state->mask |= event.mask;
+	if (!(state->mask ^ (IN_CLOSE_WRITE | IN_MODIFY))) {
+		state->mask = 0;
+		return 1;
+	}
+	return 0;
+}
+
+static void
+damage_buffer(struct client_state *state)
+{
+	wl_surface_damage(state->surface, 0, 0, state->width, state->height);
+	if (state->inotify_nonblock) {
+		struct wp_presentation_feedback *feedback =
+			wp_presentation_feedback(state->presentation, state->surface);
+		wp_presentation_feedback_add_listener(feedback, &feedback_listener, state);
+		clock_gettime(state->clk_id, &state->commit);
+	} else {
+		state->pending_emit = 1;
+	}
+
+	wl_surface_attach(state->surface, state->buffer, 0, 0);
+}
+
+static const struct wl_callback_listener frame_listener;
+
+static void
+redraw(void *data, struct wl_callback *callback, uint32_t time)
+{
+	struct client_state *state = data;
+	if (state->inotify_nonblock)
+		clock_gettime(state->clk_id, &state->redraw);
+	if (state->frame_callback)
+		wl_callback_destroy(state->frame_callback);
+	if (!state->inotify_nonblock && state->time) {
+		if (state->pending_emit)
+			emit_ready_signal(state);
+		wait_for_fb_write(state);
+		fprintf(stderr, "writing finished\n");
+	}
+	if (!state->inotify_nonblock || !state->time || fb_needs_update(state))
+		damage_buffer(state);
+
+	state->frame_callback = wl_surface_frame(state->surface);
+	wl_callback_add_listener(state->frame_callback, &frame_listener, state);
+	wl_surface_commit(state->surface);
+	state->time = time;
+}
+
+static const struct wl_callback_listener frame_listener = {
+    redraw
+};
+
+static void
+create_buffer(struct client_state *state) {
+	struct wl_shm_pool *pool;
+	int stride = state->width * 4; // 4 bytes per pixel
+	int size = stride * state->height;
+
+	state->fd = os_create_shm_file(size);
+	if (state->fd < 0) {
+		fprintf(stderr, "creating a buffer file for %d B failed: %m\n", size);
+		exit(1);
+	}
+	state->inotify_fd = init_inotify(state->inotify_nonblock);
+
+	state->shm_data = mmap(NULL, size, PROT_READ | PROT_WRITE, MAP_SHARED, state->fd, 0);
+	if (state->shm_data == MAP_FAILED) {
+		fprintf(stderr, "mmap failed: %m\n");
+		close(state->fd);
+		exit(1);
+	}
+
+	pool = wl_shm_create_pool(state->shm, state->fd, size);
+	state->buffer = wl_shm_pool_create_buffer(pool, 0, state->width, state->height, stride, WL_SHM_FORMAT_XRGB8888);
+	wl_shm_pool_destroy(pool);
+}
+
+static void
+create_window(struct client_state *state)
+{
+	if (!state->width || !state->height) {
+		fprintf(stderr, "Invalid resolution!\n");
+		exit(1);
+	}
+
+	if (state->buffer) {
+		fprintf(stderr, "wl_buffer already exists, doing nothing\n");
+		return;
+	}
+	create_buffer(state);
+	wl_surface_attach(state->surface, state->buffer, 0, 0);
+	wl_surface_commit(state->surface);
+}
+
+static void
+xdg_surface_configure(void *data, struct xdg_surface *xdg_surface, uint32_t serial)
+{
+	struct client_state *state = data;
+	xdg_surface_ack_configure(xdg_surface, serial);
+
+	state->frame_callback = wl_surface_frame(state->surface);
+	wl_callback_add_listener(state->frame_callback, &frame_listener, state);
+	create_window(state);
+}
+
+static const struct xdg_surface_listener xdg_surface_listener = {
+	.configure = xdg_surface_configure,
+};
+
+static void
+xdg_wm_base_ping(void *data, struct xdg_wm_base *xdg_wm_base, uint32_t serial)
+{
+	xdg_wm_base_pong(xdg_wm_base, serial);
+}
+
+static const struct xdg_wm_base_listener xdg_wm_base_listener = {
+	.ping = xdg_wm_base_ping,
+};
+
+static void
+xdg_toplevel_configure(void *data, struct xdg_toplevel *xdg_toplevel, int32_t width, int32_t height, struct wl_array *states)
+{
+	fprintf(stderr, AT "%s, width = %d, height = %d\n", __func__, width, height);
+	struct client_state *state = data;
+	if (!state->width) state->width = width;
+	if (!state->height) state->height = height;
+}
+
+static void
+xdg_toplevel_close(void *data, struct xdg_toplevel *xdg_toplevel)
+{
+}
+
+static const struct xdg_toplevel_listener xdg_toplevel_listener = {
+	.configure = xdg_toplevel_configure,
+	.close = xdg_toplevel_close,
+};
+
+static void
+shm_format(void *data, struct wl_shm *wl_shm, uint32_t format)
+{
+}
+
+struct wl_shm_listener shm_listener = {
+	shm_format
+};
+
+static void
+presentation_clock_id(void *data, struct wp_presentation *presentation,
+		      uint32_t clk_id)
+{
+	struct client_state *state = data;
+	state->clk_id = clk_id;
+	clock_gettime(clk_id, &state->prev);
+}
+
+
+static const struct wp_presentation_listener presentation_listener = {
+	presentation_clock_id
+};
+
+static void
+global_registry_handler(void *data, struct wl_registry *registry, uint32_t id,
+	       const char *interface, uint32_t version)
+{
+	struct client_state *state = data;
+	if (strcmp(interface, wl_compositor_interface.name) == 0) {
+		state->compositor = wl_registry_bind(registry, id, &wl_compositor_interface, 4);
+	} else if (strcmp(interface, wl_shm_interface.name) == 0) {
+		state->shm = wl_registry_bind(registry, id, &wl_shm_interface, 1);
+		wl_shm_add_listener(state->shm, &shm_listener, NULL);
+	} else if (strcmp(interface, xdg_wm_base_interface.name) == 0) {
+		state->xdg_wm_base = wl_registry_bind(registry, id, &xdg_wm_base_interface, 1);
+		xdg_wm_base_add_listener(state->xdg_wm_base, &xdg_wm_base_listener, state);
+	} else if (strcmp(interface, wp_presentation_interface.name) == 0) {
+		state->presentation = wl_registry_bind(registry, id, &wp_presentation_interface, 1);
+		wp_presentation_add_listener(state->presentation, &presentation_listener, state);
+	}
+}
+
+static void
+global_registry_remover(void *data, struct wl_registry *registry, uint32_t id)
+{
+    printf("Got a registry losing event for %d\n", id);
+}
+
+static const struct wl_registry_listener registry_listener = {
+	.global = global_registry_handler,
+	.global_remove = global_registry_remover
+};
+
+int main(int argc, char **argv)
+{
+	struct client_state state = { 0 };
+	while (argc-- > 1) {
+		if (!strcmp("--nonblock", argv[argc])) {
+			fprintf(stderr, AT "nonblock\n");
+			state.inotify_nonblock = 1;
+			break;
+		}
+	}
+
+	if (open_sd_bus(&state.bus)) {
+		fprintf(stderr, AT "Can't connect to system D-Bus\n");
+		exit(1);
+	}
+
+	state.display = wl_display_connect(NULL);
+	if (state.display == NULL) {
+		fprintf(stderr, AT "Can't connect to display\n");
+		exit(1);
+	}
+	fprintf(stderr, AT "connected to display\n");
+
+	state.registry = wl_display_get_registry(state.display);
+	wl_registry_add_listener(state.registry, &registry_listener, &state);
+
+	wl_display_dispatch(state.display);
+	wl_display_roundtrip(state.display);
+
+	if (state.compositor == NULL) {
+		fprintf(stderr, AT "Can't find compositor\n");
+		exit(1);
+	} else fprintf(stderr, AT "Found compositor\n");
+
+	state.surface = wl_compositor_create_surface(state.compositor);
+	if (state.surface == NULL) {
+		fprintf(stderr, AT "Can't create surface\n");
+		exit(1);
+	} else fprintf(stderr, AT "Created surface\n");
+
+	state.xdg_surface = xdg_wm_base_get_xdg_surface(state.xdg_wm_base, state.surface);
+	state.xdg_toplevel = xdg_surface_get_toplevel(state.xdg_surface);
+	xdg_toplevel_set_title(state.xdg_toplevel, "Framebuffer emulator");
+	xdg_toplevel_set_app_id(state.xdg_toplevel, "org.freedesktop.weston-simple-framebuffer");
+	xdg_toplevel_add_listener(state.xdg_toplevel, &xdg_toplevel_listener, &state);
+	wl_surface_commit(state.surface);
+	xdg_surface_add_listener(state.xdg_surface, &xdg_surface_listener, &state);
+	wl_surface_commit(state.surface);
+
+	while (wl_display_dispatch(state.display) != -1);
+
+	wl_display_disconnect(state.display);
+	printf("disconnected from display\n");
+	close_sd_bus(state.bus);
+
+	return 0;
+}
diff --git a/clients/meson.build b/clients/meson.build
index bdc5d44a..bbebcae1 100644
--- a/clients/meson.build
+++ b/clients/meson.build
@@ -99,6 +99,18 @@ simple_clients = [
 		'deps': [ 'egl', 'wayland-egl', 'glesv2', 'wayland-cursor' ],
 		'options': [ 'renderer-gl' ]
 	},
+	{
+		'name': 'framebuffer',
+		'sources': [
+			'framebuffer.c',
+			presentation_time_client_protocol_h,
+			presentation_time_protocol_c,
+			xdg_shell_client_protocol_h,
+			xdg_shell_protocol_c,
+		],
+		'dep_objs': [ dep_wayland_client, cc.find_library('rt') ],
+		'deps': [ 'libsystemd' ]
+	},
 	# weston-simple-im is handled specially separately due to install_dir and odd window.h usage
 	{
 		'name': 'shm',
diff --git a/meson_options.txt b/meson_options.txt
index 73ef2c34..8424a52d 100644
--- a/meson_options.txt
+++ b/meson_options.txt
@@ -187,7 +187,7 @@ option(
 option(
 	'simple-clients',
 	type: 'array',
-	choices: [ 'all', 'damage', 'im', 'egl', 'shm', 'touch', 'dmabuf-v4l', 'dmabuf-egl' ],
+	choices: [ 'all', 'damage', 'im', 'egl', 'shm', 'touch', 'dmabuf-v4l', 'dmabuf-egl', 'framebuffer' ],
 	value: [ 'all' ],
 	description: 'Sample clients: simple test programs'
 )
-- 
2.28.0

