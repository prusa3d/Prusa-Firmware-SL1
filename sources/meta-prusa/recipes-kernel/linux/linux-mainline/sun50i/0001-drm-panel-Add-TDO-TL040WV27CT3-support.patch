From a12226763bc8973f0f80b12a9acb004da4831e25 Mon Sep 17 00:00:00 2001
From: Roman Beranek <roman.beranek@prusa3d.com>
Date: Thu, 30 Aug 2018 04:39:09 +0200
Subject: [PATCH] drm/panel: Add TDO TL040WV27CT3 support

This panel has a 4" IPS LCD screen with 480x800 pixels and 2-lane
MIPI-DSI interface. The screen is driven by Ilitek ILI9806e.
---
 drivers/gpu/drm/panel/Kconfig                 |   9 +
 drivers/gpu/drm/panel/Makefile                |   1 +
 .../gpu/drm/panel/panel-tdo-tl040wv27ct3.c    | 381 ++++++++++++++++++
 3 files changed, 391 insertions(+)
 create mode 100644 drivers/gpu/drm/panel/panel-tdo-tl040wv27ct3.c

diff --git a/drivers/gpu/drm/panel/Kconfig b/drivers/gpu/drm/panel/Kconfig
index ae44ac2ec106..b80e9713f2f7 100644
--- a/drivers/gpu/drm/panel/Kconfig
+++ b/drivers/gpu/drm/panel/Kconfig
@@ -357,6 +357,15 @@ config DRM_PANEL_SONY_ACX565AKM
 	  Say Y here if you want to enable support for the Sony ACX565AKM
 	  800x600 3.5" panel (found on the Nokia N900).
 
+config DRM_PANEL_TDO_TL040WV27CT3
+	tristate "TDO TL040WV27CT3 (ILI9806E-based) panel"
+	depends on OF
+	depends on DRM_MIPI_DSI
+	depends on BACKLIGHT_CLASS_DEVICE
+	help
+	  Say Y if you want to enable support for TDO TL040WV27CT3,
+	  a 4" LCD panel controlled via Ilitek ILI9806e driver.
+
 config DRM_PANEL_TPO_TD028TTEC1
 	tristate "Toppoly (TPO) TD028TTEC1 panel driver"
 	depends on OF && SPI
diff --git a/drivers/gpu/drm/panel/Makefile b/drivers/gpu/drm/panel/Makefile
index 7c4d3c581fd4..52fc15945ae9 100644
--- a/drivers/gpu/drm/panel/Makefile
+++ b/drivers/gpu/drm/panel/Makefile
@@ -37,6 +37,7 @@ obj-$(CONFIG_DRM_PANEL_SITRONIX_ST7701) += panel-sitronix-st7701.o
 obj-$(CONFIG_DRM_PANEL_SITRONIX_ST7789V) += panel-sitronix-st7789v.o
 obj-$(CONFIG_DRM_PANEL_SONY_ACX424AKP) += panel-sony-acx424akp.o
 obj-$(CONFIG_DRM_PANEL_SONY_ACX565AKM) += panel-sony-acx565akm.o
+obj-$(CONFIG_DRM_PANEL_TDO_TL040WV27CT3) += panel-tdo-tl040wv27ct3.o
 obj-$(CONFIG_DRM_PANEL_TPO_TD028TTEC1) += panel-tpo-td028ttec1.o
 obj-$(CONFIG_DRM_PANEL_TPO_TD043MTEA1) += panel-tpo-td043mtea1.o
 obj-$(CONFIG_DRM_PANEL_TPO_TPG110) += panel-tpo-tpg110.o
diff --git a/drivers/gpu/drm/panel/panel-tdo-tl040wv27ct3.c b/drivers/gpu/drm/panel/panel-tdo-tl040wv27ct3.c
new file mode 100644
index 000000000000..bf710a210941
--- /dev/null
+++ b/drivers/gpu/drm/panel/panel-tdo-tl040wv27ct3.c
@@ -0,0 +1,381 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Copyright (C) 2018, Roman Beranek
+ */
+
+#include <linux/delay.h>
+#include <linux/device.h>
+#include <linux/err.h>
+#include <linux/errno.h>
+#include <linux/fb.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+
+#include <linux/gpio/consumer.h>
+#include <linux/regulator/consumer.h>
+
+#include <drm/drm_mipi_dsi.h>
+#include <drm/drm_modes.h>
+#include <drm/drm_panel.h>
+#include <drm/drm_print.h>
+
+#include <video/mipi_display.h>
+
+struct tdo {
+	struct drm_panel	panel;
+	struct mipi_dsi_device	*dsi;
+
+	struct regulator	*power_supply;
+	struct gpio_desc	*reset_gpio;
+
+	bool	prepared;
+	bool	enabled;
+};
+
+static inline struct tdo *panel_to_tdo(struct drm_panel *panel)
+{
+	return container_of(panel, struct tdo, panel);
+}
+
+#define dcs_write_seq(ctx, cmd, seq...)			\
+({							\
+	static const u8 d[] = { seq };			\
+	mipi_dsi_dcs_write(ctx, cmd, d, ARRAY_SIZE(d));	\
+})
+
+static int ilitek_switch_page(struct tdo *ctx, u8 page)
+{
+	u8 seq[] = { 0xff, 0x98, 0x06, 0x04, page };
+	if (page > 7)
+		return -1;
+	return mipi_dsi_dcs_write(ctx->dsi, 0xff, seq, 5);
+}
+
+/*
+ * The panel seems to accept some private DCS commands that map
+ * directly to registers.
+ *
+ * It is organised by page, with each page having its own set of
+ * registers, and the first page looks like it's holding the standard
+ * DCS commands.
+ *
+ * So before any attempt at sending a command or data, we have to be
+ * sure if we're in the right page or not.
+ */
+static int tdo_prepare(struct drm_panel *panel)
+{
+	struct tdo *ctx = panel_to_tdo(panel);
+	int ret;
+
+	if (ctx->prepared)
+		return 0;
+
+	/* Power the panel on */
+	ret = regulator_enable(ctx->power_supply);
+	if (ret)
+		return ret;
+	msleep(10);
+
+	/* And reset it */
+	/* Delay times taken from an ILI9806e AN */
+	gpiod_set_value(ctx->reset_gpio, 0);
+	msleep(1);
+	gpiod_set_value(ctx->reset_gpio, 1);
+	msleep(10);
+	gpiod_set_value(ctx->reset_gpio, 0);
+	msleep(120);
+
+	ilitek_switch_page(ctx, 1);
+	dcs_write_seq(ctx->dsi, 0x08, 0x10); /* Output SDA */
+	dcs_write_seq(ctx->dsi, 0x21, 0x01); /* DE -> ACTIVE_LOW */
+	dcs_write_seq(ctx->dsi, 0x30, 0x02); /* RESCTRL, 480x800 */
+	dcs_write_seq(ctx->dsi, 0x31, 0x02); /* INVTR, 2-dot column inversion */
+	dcs_write_seq(ctx->dsi, 0x40, 0x11); /* PWCTRL1, VDH = 2.5xVCI, VDL = -2.5xVCI */
+	dcs_write_seq(ctx->dsi, 0x41, 0x77); /* PWCTRL2, VDL clamp ->  -5.6V, VDH clamp -> 5.0V */
+	dcs_write_seq(ctx->dsi, 0x42, 0x03); /* PWCTRL3 */
+	dcs_write_seq(ctx->dsi, 0x43, 0x09); /* PWCTRL4 */
+	dcs_write_seq(ctx->dsi, 0x44, 0x07); /* PWCTRL5 */
+	dcs_write_seq(ctx->dsi, 0x50, 0x78); /* PWCTRL9, VREG1OUT ->  4.5V */
+	dcs_write_seq(ctx->dsi, 0x51, 0x78); /* PWCTRL10 VREG2OUT -> -4.5V */
+	dcs_write_seq(ctx->dsi, 0x52, 0x00); /* VMCTRL1 */
+	dcs_write_seq(ctx->dsi, 0x53, 0x54); /* VMCTRL2, VCOM -> -1.8750V */
+	dcs_write_seq(ctx->dsi, 0x60, 0x07); /* SDTI, Source SDT timing adjustment ~1.54 us */
+	dcs_write_seq(ctx->dsi, 0x61, 0x00); /* CRTI, Source CR timing adjustment ~0.88 us */
+	dcs_write_seq(ctx->dsi, 0x62, 0x08); /* EQTI, Source EQ timing adjustment ~1.76 us */
+	dcs_write_seq(ctx->dsi, 0x63, 0x00); /* PCTI, Source PC timing adjustment ~0.88 us */
+
+
+	/* Positive Gamma Control 1-16 */
+	dcs_write_seq(ctx->dsi, 0xa0, 0x00);
+	dcs_write_seq(ctx->dsi, 0xa1, 0x03);
+	dcs_write_seq(ctx->dsi, 0xa2, 0x0a);
+	dcs_write_seq(ctx->dsi, 0xa3, 0x0e);
+	dcs_write_seq(ctx->dsi, 0xa4, 0x09);
+	dcs_write_seq(ctx->dsi, 0xa5, 0x18);
+	dcs_write_seq(ctx->dsi, 0xa6, 0x07);
+	dcs_write_seq(ctx->dsi, 0xa7, 0x08);
+	dcs_write_seq(ctx->dsi, 0xa8, 0x03);
+	dcs_write_seq(ctx->dsi, 0xa9, 0x09);
+	dcs_write_seq(ctx->dsi, 0xaa, 0x04);
+	dcs_write_seq(ctx->dsi, 0xab, 0x03);
+	dcs_write_seq(ctx->dsi, 0xac, 0x08);
+	dcs_write_seq(ctx->dsi, 0xad, 0x36);
+	dcs_write_seq(ctx->dsi, 0xae, 0x31);
+	dcs_write_seq(ctx->dsi, 0xaf, 0x00);
+
+	/* Negative Gamma Control 1-16 */
+	dcs_write_seq(ctx->dsi, 0xc0, 0x00);
+	dcs_write_seq(ctx->dsi, 0xc1, 0x02);
+	dcs_write_seq(ctx->dsi, 0xc2, 0x07);
+	dcs_write_seq(ctx->dsi, 0xc3, 0x0d);
+	dcs_write_seq(ctx->dsi, 0xc4, 0x05);
+	dcs_write_seq(ctx->dsi, 0xc5, 0x12);
+	dcs_write_seq(ctx->dsi, 0xc6, 0x09);
+	dcs_write_seq(ctx->dsi, 0xc7, 0x08);
+	dcs_write_seq(ctx->dsi, 0xc8, 0x03);
+	dcs_write_seq(ctx->dsi, 0xc9, 0x06);
+	dcs_write_seq(ctx->dsi, 0xca, 0x09);
+	dcs_write_seq(ctx->dsi, 0xcb, 0x03);
+	dcs_write_seq(ctx->dsi, 0xcc, 0x0d);
+	dcs_write_seq(ctx->dsi, 0xcd, 0x29);
+	dcs_write_seq(ctx->dsi, 0xce, 0x22);
+	dcs_write_seq(ctx->dsi, 0xcf, 0x00);
+
+	/* GIP Setting */
+	ilitek_switch_page(ctx, 6);
+	dcs_write_seq(ctx->dsi, 0x00, 0x21);
+	dcs_write_seq(ctx->dsi, 0x01, 0x0a);
+	dcs_write_seq(ctx->dsi, 0x02, 0x00);
+	dcs_write_seq(ctx->dsi, 0x03, 0x00);
+	dcs_write_seq(ctx->dsi, 0x04, 0x01);
+	dcs_write_seq(ctx->dsi, 0x05, 0x01);
+	dcs_write_seq(ctx->dsi, 0x06, 0x80);
+	dcs_write_seq(ctx->dsi, 0x07, 0x06);
+	dcs_write_seq(ctx->dsi, 0x08, 0x01);
+	dcs_write_seq(ctx->dsi, 0x09, 0x80);
+	dcs_write_seq(ctx->dsi, 0x0a, 0x00);
+	dcs_write_seq(ctx->dsi, 0x0b, 0x00);
+	dcs_write_seq(ctx->dsi, 0x0c, 0x0a);
+	dcs_write_seq(ctx->dsi, 0x0d, 0x0a);
+	dcs_write_seq(ctx->dsi, 0x0e, 0x00);
+	dcs_write_seq(ctx->dsi, 0x0f, 0x00);
+	dcs_write_seq(ctx->dsi, 0x10, 0xf0);
+	dcs_write_seq(ctx->dsi, 0x11, 0xf4);
+	dcs_write_seq(ctx->dsi, 0x12, 0x04);
+	dcs_write_seq(ctx->dsi, 0x13, 0x00);
+	dcs_write_seq(ctx->dsi, 0x14, 0x00);
+	dcs_write_seq(ctx->dsi, 0x15, 0xc0);
+	dcs_write_seq(ctx->dsi, 0x16, 0x08);
+	dcs_write_seq(ctx->dsi, 0x17, 0x00);
+	dcs_write_seq(ctx->dsi, 0x18, 0x00);
+	dcs_write_seq(ctx->dsi, 0x19, 0x00);
+	dcs_write_seq(ctx->dsi, 0x1a, 0x00);
+	dcs_write_seq(ctx->dsi, 0x1b, 0x00);
+	dcs_write_seq(ctx->dsi, 0x1c, 0x00);
+	dcs_write_seq(ctx->dsi, 0x1d, 0x00);
+	dcs_write_seq(ctx->dsi, 0x20, 0x01);
+	dcs_write_seq(ctx->dsi, 0x21, 0x23);
+	dcs_write_seq(ctx->dsi, 0x22, 0x45);
+	dcs_write_seq(ctx->dsi, 0x23, 0x67);
+	dcs_write_seq(ctx->dsi, 0x24, 0x01);
+	dcs_write_seq(ctx->dsi, 0x25, 0x23);
+	dcs_write_seq(ctx->dsi, 0x26, 0x45);
+	dcs_write_seq(ctx->dsi, 0x27, 0x67);
+	dcs_write_seq(ctx->dsi, 0x30, 0x01);
+	dcs_write_seq(ctx->dsi, 0x31, 0x11);
+	dcs_write_seq(ctx->dsi, 0x32, 0x00);
+	dcs_write_seq(ctx->dsi, 0x33, 0xee);
+	dcs_write_seq(ctx->dsi, 0x34, 0xff);
+	dcs_write_seq(ctx->dsi, 0x35, 0xbb);
+	dcs_write_seq(ctx->dsi, 0x36, 0xca);
+	dcs_write_seq(ctx->dsi, 0x37, 0xdd);
+	dcs_write_seq(ctx->dsi, 0x38, 0xac);
+	dcs_write_seq(ctx->dsi, 0x39, 0x76);
+	dcs_write_seq(ctx->dsi, 0x3a, 0x67);
+	dcs_write_seq(ctx->dsi, 0x3b, 0x22);
+	dcs_write_seq(ctx->dsi, 0x3c, 0x22);
+	dcs_write_seq(ctx->dsi, 0x3d, 0x22);
+	dcs_write_seq(ctx->dsi, 0x3e, 0x22);
+	dcs_write_seq(ctx->dsi, 0x3f, 0x22);
+	dcs_write_seq(ctx->dsi, 0x40, 0x22);
+	dcs_write_seq(ctx->dsi, 0x52, 0x10);
+	dcs_write_seq(ctx->dsi, 0x53, 0x10);
+
+	ilitek_switch_page(ctx, 7);
+	dcs_write_seq(ctx->dsi, 0x17, 0x22); /* VGLREG_EN */
+	dcs_write_seq(ctx->dsi, 0x02, 0x77); /* DDVDH/L clamp bias -> 16 uA */
+	dcs_write_seq(ctx->dsi, 0xe1, 0x79); /* ??? undocumented */
+
+	ilitek_switch_page(ctx, 0);
+
+	ret = mipi_dsi_dcs_exit_sleep_mode(ctx->dsi);
+	if (ret)
+		return ret;
+
+	msleep(120);
+
+	ret = mipi_dsi_dcs_set_display_on(ctx->dsi);
+	if (ret)
+		return ret;
+
+	msleep(20);
+
+	ctx->prepared = true;
+
+	return 0;
+}
+
+static int tdo_enable(struct drm_panel *panel)
+{
+	struct tdo *ctx = panel_to_tdo(panel);
+
+	msleep(120);
+	mipi_dsi_dcs_set_display_on(ctx->dsi);
+
+	return 0;
+}
+
+static int tdo_disable(struct drm_panel *panel)
+{
+	struct tdo *ctx = panel_to_tdo(panel);
+
+	return mipi_dsi_dcs_set_display_off(ctx->dsi);
+}
+
+static int tdo_unprepare(struct drm_panel *panel)
+{
+	struct tdo *ctx = panel_to_tdo(panel);
+
+	if (!ctx->prepared)
+		return 0;
+
+	mipi_dsi_dcs_enter_sleep_mode(ctx->dsi);
+	msleep(120);
+
+	regulator_disable(ctx->power_supply);
+	gpiod_set_value(ctx->reset_gpio, 1);
+
+	ctx->prepared = false;
+	return 0;
+}
+
+static const struct drm_display_mode default_mode = {
+	.clock		= 19800,
+	.vrefresh	= 45,
+
+	.hdisplay	= 480,
+	.hsync_start	= 480 + 25,
+	.hsync_end	= 480 + 25 + 10,
+	.htotal		= 480 + 25 + 10 + 10,
+
+	.vdisplay	= 800,
+	.vsync_start	= 800 + 34,
+	.vsync_end	= 800 + 34 + 10,
+	.vtotal		= 800 + 34 + 10 + 8,
+};
+
+static int tdo_get_modes(struct drm_panel *panel,
+			      struct drm_connector *connector)
+{
+	struct drm_display_mode *mode;
+
+	mode = drm_mode_duplicate(connector->dev, &default_mode);
+	if (!mode) {
+		DRM_ERROR("failed to add mode %ux%ux@%u\n",
+			default_mode.hdisplay,
+			default_mode.vdisplay,
+			default_mode.vrefresh);
+		return -ENOMEM;
+	}
+
+	drm_mode_set_name(mode);
+
+	mode->type = DRM_MODE_TYPE_DRIVER | DRM_MODE_TYPE_PREFERRED;
+	drm_mode_probed_add(connector, mode);
+
+	connector->display_info.width_mm = 57;
+	connector->display_info.height_mm = 97;
+
+	return 1;
+}
+
+static const struct drm_panel_funcs tdo_funcs = {
+	.prepare	= tdo_prepare,
+	.unprepare	= tdo_unprepare,
+	.enable		= tdo_enable,
+	.disable	= tdo_disable,
+	.get_modes	= tdo_get_modes,
+};
+
+static int tdo_dsi_probe(struct mipi_dsi_device *dsi)
+{
+	struct tdo *ctx;
+	int ret;
+
+	dsi->mode_flags = MIPI_DSI_MODE_VIDEO;
+	dsi->format = MIPI_DSI_FMT_RGB888;
+	dsi->lanes = 2;
+
+	ctx = devm_kzalloc(&dsi->dev, sizeof(*ctx), GFP_KERNEL);
+	if (!ctx)
+		return -ENOMEM;
+	mipi_dsi_set_drvdata(dsi, ctx);
+	ctx->dsi = dsi;
+
+	ctx->power_supply = devm_regulator_get(&dsi->dev, "power");
+	if (IS_ERR(ctx->power_supply)) {
+		dev_err(&dsi->dev, "Couldn't get MIPI power regulator. "
+			"Error: %ld\n", PTR_ERR(ctx->power_supply));
+		return PTR_ERR(ctx->power_supply);
+	}
+
+	ctx->reset_gpio = devm_gpiod_get(&dsi->dev, "reset", GPIOD_OUT_LOW);
+	if (IS_ERR(ctx->reset_gpio)) {
+		dev_err(&dsi->dev, "Couldn't get our reset GPIO. Error: %ld\n",
+			PTR_ERR(ctx->reset_gpio));
+		return PTR_ERR(ctx->reset_gpio);
+	}
+
+	drm_panel_init(&ctx->panel, &dsi->dev, &tdo_funcs,
+		       DRM_MODE_CONNECTOR_DSI);
+
+	ret = drm_panel_of_backlight(&ctx->panel);
+	if (ret)
+		return ret;
+
+	ret = drm_panel_add(&ctx->panel);
+	if (ret < 0)
+		return ret;
+
+	return mipi_dsi_attach(dsi);
+}
+
+static int tdo_dsi_remove(struct mipi_dsi_device *dsi)
+{
+	struct tdo *ctx = mipi_dsi_get_drvdata(dsi);
+
+	mipi_dsi_detach(dsi);
+	drm_panel_remove(&ctx->panel);
+
+	return 0;
+}
+
+static const struct of_device_id tdo_of_match[] = {
+	{ .compatible = "tdo,tl040wv27ct3" },
+	{ }
+};
+MODULE_DEVICE_TABLE(of, tdo_of_match);
+
+static struct mipi_dsi_driver tdo_dsi_driver = {
+	.probe		= tdo_dsi_probe,
+	.remove		= tdo_dsi_remove,
+	.driver = {
+		.name		= "tdo-tl040wv27ct3",
+		.of_match_table	= tdo_of_match,
+	},
+};
+module_mipi_dsi_driver(tdo_dsi_driver);
+
+MODULE_AUTHOR("Roman Beranek <roman.beranek@prusa3d.com>");
+MODULE_DESCRIPTION("TDO TL040WV27CT3 LCD Panel Driver");
+MODULE_LICENSE("GPL v2");
-- 
2.26.0

