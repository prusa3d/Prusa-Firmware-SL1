From bbb360e239c7a6b8d3ddbc4d589ef3dcf2c55cdf Mon Sep 17 00:00:00 2001
From: Roman Beranek <roman.beranek@prusa3d.com>
Date: Thu, 30 Aug 2018 04:39:09 +0200
Subject: [PATCH] drm/panel: Add Ilitek ILI9806e panel driver

TDO TL040WV27CT3 is a panel built into the Prusa SL1 printer,
and is based on the Ilitek ILI9806e controller. This panel
has a 4" IPS LCD screen with 480x800 pixels and 2-lane
MIPI-DSI interface.
---
 drivers/gpu/drm/panel/Kconfig                 |   9 +
 drivers/gpu/drm/panel/Makefile                |   1 +
 drivers/gpu/drm/panel/panel-ilitek-ili9806e.c | 440 ++++++++++++++++++
 3 files changed, 450 insertions(+)
 create mode 100644 drivers/gpu/drm/panel/panel-ilitek-ili9806e.c

diff --git a/drivers/gpu/drm/panel/Kconfig b/drivers/gpu/drm/panel/Kconfig
index cfc8d644cedf..5b146ef0bc44 100644
--- a/drivers/gpu/drm/panel/Kconfig
+++ b/drivers/gpu/drm/panel/Kconfig
@@ -149,6 +149,15 @@ config DRM_PANEL_ILITEK_ILI9341
 	  QVGA (240x320) RGB panels. support serial & parallel rgb
 	  interface.
 
+config DRM_PANEL_ILITEK_ILI9806E
+	tristate "Ilitek ILI9806e-based panels"
+	depends on OF
+	depends on DRM_MIPI_DSI
+	depends on BACKLIGHT_CLASS_DEVICE
+	help
+	  Say Y if you want to enable support for panels based on the
+	  Ilitek ILI9806e controller.
+
 config DRM_PANEL_ILITEK_ILI9881C
 	tristate "Ilitek ILI9881C-based panels"
 	depends on OF
diff --git a/drivers/gpu/drm/panel/Makefile b/drivers/gpu/drm/panel/Makefile
index bca4cc1f2715..67cf78ba5444 100644
--- a/drivers/gpu/drm/panel/Makefile
+++ b/drivers/gpu/drm/panel/Makefile
@@ -13,6 +13,7 @@ obj-$(CONFIG_DRM_PANEL_FEIXIN_K101_IM2BA02) += panel-feixin-k101-im2ba02.o
 obj-$(CONFIG_DRM_PANEL_FEIYANG_FY07024DI26A30D) += panel-feiyang-fy07024di26a30d.o
 obj-$(CONFIG_DRM_PANEL_ILITEK_IL9322) += panel-ilitek-ili9322.o
 obj-$(CONFIG_DRM_PANEL_ILITEK_ILI9341) += panel-ilitek-ili9341.o
+obj-$(CONFIG_DRM_PANEL_ILITEK_ILI9806E) += panel-ilitek-ili9806e.o
 obj-$(CONFIG_DRM_PANEL_ILITEK_ILI9881C) += panel-ilitek-ili9881c.o
 obj-$(CONFIG_DRM_PANEL_INNOLUX_EJ030NA) += panel-innolux-ej030na.o
 obj-$(CONFIG_DRM_PANEL_INNOLUX_P079ZCA) += panel-innolux-p079zca.o
diff --git a/drivers/gpu/drm/panel/panel-ilitek-ili9806e.c b/drivers/gpu/drm/panel/panel-ilitek-ili9806e.c
new file mode 100644
index 000000000000..28df4bb8ed48
--- /dev/null
+++ b/drivers/gpu/drm/panel/panel-ilitek-ili9806e.c
@@ -0,0 +1,440 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Copyright (C) 2018, Roman Beranek
+ */
+
+#include <linux/delay.h>
+#include <linux/device.h>
+#include <linux/err.h>
+#include <linux/errno.h>
+#include <linux/fb.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/of_device.h>
+
+#include <linux/gpio/consumer.h>
+#include <linux/regulator/consumer.h>
+
+#include <drm/drm_mipi_dsi.h>
+#include <drm/drm_modes.h>
+#include <drm/drm_panel.h>
+
+#include <video/mipi_display.h>
+
+struct ili9806e_panel_desc;
+
+struct ili9806e {
+	struct drm_panel panel;
+	struct mipi_dsi_device *dsi;
+	const struct ili9806e_panel_desc *desc;
+
+	struct regulator *power;
+	struct gpio_desc *reset;
+
+	u8 current_page;
+};
+
+/* value = (page << 8) | cmd */
+enum ili9806e_reg {
+	IFMODE1 	= 0x108u,
+	DISCTRL2	= 0x121u,
+	RESCTRL 	= 0x130u,
+	INVTR	 	= 0x131u,
+	PWCTRL1 	= 0x140u, /* PWRCTRL1-8 */
+	PWCTRL9 	= 0x150u, /* PWRCTRL9-10 */
+	VMCTRL1 	= 0x152u, /* VMCTRL1-5 */
+	LVD		= 0x157u,
+	TI		= 0x160u, /* SDTI, CRTI, EQTI, PCTI */
+	REGAM_P		= 0x1a0u,
+	REGAM_N		= 0x1c0u,
+	GIPCTRL1	= 0x600u, /* GIP_0_SET0-27, STV_A_Rise, CLK_A_Rise */
+	GIPCTRL2	= 0x620u, /* GIP_1_SET0-7 */
+	GIPCTRL3	= 0x630u, /* GIP_2_SET0-16 */
+	GVLOCTRL	= 0x653u,
+	GVHOCTRL	= 0x654u,
+	PWBCTRL		= 0x702u,
+	VCLCTRL		= 0x706u,
+	VGLREGEN	= 0x717u,
+	TIMECTRL	= 0x7e1u,
+};
+
+enum ili9806e_resolution {
+	RESCTRL_480x864 = 0,
+	RESCTRL_480x854,
+	RESCTRL_480x800,
+	RESCTRL_480x640,
+	RESCTRL_480x720,
+	RESCTRL_INVALID = 0xff,
+};
+
+struct ili9806e_reg_data {
+	u8 invtr;
+	u8 pwctrl1[5];
+	u8 pwctrl9[2];
+	u8 vmctrl[4];
+	u8 lvd;
+	u8 ti[4];
+	u8 regam_p[16];
+	u8 regam_n[16];
+	u8 gipctrl1[30];
+	u8 gipctrl2[8];
+	u8 gipctrl3[17];
+	u8 gvloctrl;
+	u8 gvhoctrl;
+	u8 pwbctrl;
+	u8 vclctrl;
+	u8 vglregen;
+	u8 timectrl;
+};
+
+struct ili9806e_panel_desc {
+	struct drm_display_mode mode;
+	struct ili9806e_reg_data reg;
+};
+
+static const struct ili9806e_panel_desc tl040wv27ct3_data = {
+	.mode = {
+		.clock = 19800,
+		.hdisplay = 480,
+		.hsync_start = 480 + 25,
+		.hsync_end = 480 + 25 + 10,
+		.htotal = 480 + 25 + 10 + 10,
+		.vdisplay = 800,
+		.vsync_start = 800 + 34,
+		.vsync_end = 800 + 34 + 10,
+		.vtotal = 800 + 34 + 10 + 8,
+		.width_mm = 57,
+		.height_mm = 97,
+	},
+	.reg = {
+		.invtr = 0x02,
+		.pwctrl1 = { 0x11, 0x77, 0x03, 0x09, 0x07 },
+		.pwctrl9 = { 0x78, 0x78 },
+		.vmctrl = { 0x00, 0x54, 0x00, 0x6f },
+		.lvd = 0x20,
+		.ti = { 0x07, 0x00, 0x08, 0x00 },
+		.regam_p = { 0x00, 0x03, 0x0a, 0x0e, 0x09, 0x18, 0x07, 0x08,
+			     0x03, 0x09, 0x04, 0x03, 0x08, 0x36, 0x31, 0x00 },
+		.regam_n = { 0x00, 0x02, 0x07, 0x0d, 0x05, 0x12, 0x09, 0x08,
+			     0x03, 0x06, 0x09, 0x03, 0x0d, 0x29, 0x22, 0x00 },
+		.gipctrl1 = { 0x21, 0x0a, 0x00, 0x00, 0x01, 0x01, 0x80, 0x06,
+			      0x01, 0x80, 0x00, 0x00, 0x0a, 0x0a, 0x00, 0x00,
+			      0xf0, 0xf4, 0x04, 0x00, 0x00, 0xc0, 0x08, 0x00,
+			      0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
+		.gipctrl2 = { 0x01, 0x23, 0x45, 0x67, 0x01, 0x23, 0x45, 0x67 },
+		.gipctrl3 = { 0x01, 0x11, 0x00, 0xee, 0xff, 0xbb, 0xca, 0xdd,
+			      0xac, 0x76, 0x67, 0x22, 0x22, 0x22, 0x22, 0x22,
+			      0x22 },
+		.gvloctrl = 0x10,
+		.gvhoctrl = 0x10,
+		.pwbctrl = 0x77,
+		.vclctrl = 0x01,
+		.vglregen = 0x22,
+		.timectrl = 0x79,
+	}
+};
+
+static inline struct ili9806e *panel_to_ili9806e(struct drm_panel *panel)
+{
+	return container_of(panel, struct ili9806e, panel);
+}
+
+static int ili9806e_switch_page(struct ili9806e *ctx, u8 page)
+{
+	int ret;
+	u8 seq[] = { 0xff, 0x98, 0x06, 0x04, page };
+	if (page > 7)
+		return -1;
+	ret = mipi_dsi_dcs_write(ctx->dsi, 0xff, seq, 5);
+	if (ret > 0)
+		ctx->current_page = page;
+	return ret;
+}
+
+static int ili9806e_write_register(struct ili9806e *ctx, u16 reg, u8 value)
+{
+	u8 page = reg >> 8;
+	u8 cmd = reg & 0xffu;
+	if (ctx->current_page != page)
+		ili9806e_switch_page(ctx, page);
+	return mipi_dsi_dcs_write(ctx->dsi, cmd, &value, 1);
+}
+
+static int ili9806e_write_series(struct ili9806e *ctx, u16 reg, size_t length, const u8 *values)
+{
+	int ret;
+	const u8 *end = values + length;
+	u8 page = reg >> 8;
+	u8 cmd = reg & 0xffu;
+
+	if (ctx->current_page != page)
+		ili9806e_switch_page(ctx, page);
+	while (values < end) {
+		ret = mipi_dsi_dcs_write(ctx->dsi, cmd++, values++, 1);
+		if (ret < 0)
+			return ret;
+	}
+	return 0;
+}
+
+static u8 ili9806e_resctrl_value(const struct drm_display_mode *mode)
+{
+	switch (mode->vdisplay) {
+	case 864:
+		return RESCTRL_480x864;
+	case 854:
+		return RESCTRL_480x854;
+	case 800:
+		return RESCTRL_480x800;
+	case 640:
+		return RESCTRL_480x640;
+	case 720:
+		return RESCTRL_480x720;
+	default:
+		return RESCTRL_INVALID;
+	}
+}
+
+static int ili9806e_configure_registers(struct ili9806e *ctx)
+{
+	const struct ili9806e_reg_data *reg = &ctx->desc->reg;
+
+	u8 resctrl = ili9806e_resctrl_value(&ctx->desc->mode);
+	if (resctrl == RESCTRL_INVALID) {
+		dev_err(&ctx->dsi->dev, "%ux%u is not a valid resolution\n",
+			ctx->desc->mode.hdisplay,
+			ctx->desc->mode.vdisplay);
+		return -EINVAL;
+	}
+
+	ili9806e_write_register(ctx, IFMODE1, 0x10); /* Output SDA */
+	ili9806e_write_register(ctx, DISCTRL2, 0x01); /* DE -> ACTIVE_LOW */
+	ili9806e_write_register(ctx, RESCTRL, resctrl);
+	ili9806e_write_register(ctx, INVTR, reg->invtr);
+	ili9806e_write_series(ctx, PWCTRL1, sizeof(reg->pwctrl1), reg->pwctrl1);
+	ili9806e_write_series(ctx, PWCTRL9, sizeof(reg->pwctrl9), reg->pwctrl9);
+	ili9806e_write_series(ctx, VMCTRL1, sizeof(reg->vmctrl), reg->vmctrl);
+	ili9806e_write_register(ctx, LVD, reg->lvd);
+	ili9806e_write_series(ctx, TI, sizeof(reg->ti), reg->ti);
+	ili9806e_write_series(ctx, REGAM_P, sizeof(reg->regam_p), reg->regam_p);
+	ili9806e_write_series(ctx, REGAM_N, sizeof(reg->regam_n), reg->regam_n);
+	ili9806e_write_series(ctx, GIPCTRL1, sizeof(reg->gipctrl1), reg->gipctrl1);
+	ili9806e_write_series(ctx, GIPCTRL2, sizeof(reg->gipctrl2), reg->gipctrl2);
+	ili9806e_write_series(ctx, GIPCTRL3, sizeof(reg->gipctrl3), reg->gipctrl3);
+	ili9806e_write_register(ctx, GVLOCTRL, reg->gvloctrl);
+	ili9806e_write_register(ctx, GVHOCTRL, reg->gvhoctrl);
+	ili9806e_write_register(ctx, PWBCTRL, reg->pwbctrl);
+	ili9806e_write_register(ctx, VCLCTRL, reg->vclctrl);
+	ili9806e_write_register(ctx, VGLREGEN, reg->vglregen);
+	ili9806e_write_register(ctx, TIMECTRL, reg->timectrl);
+
+	return 0;
+}
+
+static int ili9806e_prepare_backlight(struct ili9806e *ctx)
+{
+	int ret;
+
+	/*
+	* BIT(5) BCTRL = 1 Backlight Control Block On, Brightness registers
+	*                  are active
+	* BIT(3) BL = 1    Backlight Control On
+	* BIT(2) DD = 0    Display Dimming is Off
+	*/
+	ret = mipi_dsi_dcs_write(ctx->dsi, MIPI_DCS_WRITE_CONTROL_DISPLAY,
+				(u8[]){ 0x24 }, 1);
+	if (ret < 0) {
+		dev_err(&ctx->dsi->dev, "failed to write control display: %d\n", ret);
+		return ret;
+	}
+	/* CABC off */
+	ret = mipi_dsi_dcs_write(ctx->dsi, MIPI_DCS_WRITE_POWER_SAVE,
+				(u8[]){ 0x00 }, 1);
+	if (ret < 0) {
+		dev_err(&ctx->dsi->dev, "failed to set cabc off: %d\n", ret);
+		return ret;
+	}
+	ret = mipi_dsi_dcs_write(ctx->dsi, MIPI_DCS_SET_DISPLAY_BRIGHTNESS,
+				(u8[]){ 0x80 }, 1);
+
+	return ret;
+}
+
+static int ili9806e_prepare(struct drm_panel *panel)
+{
+	struct ili9806e *ctx = panel_to_ili9806e(panel);
+	int ret;
+
+	/* Power the panel on */
+	ret = regulator_enable(ctx->power);
+	if (ret)
+		return ret;
+	msleep(10);
+
+	/* And reset it */
+	/* Delay times taken from an ILI9806e AN */
+	gpiod_set_value(ctx->reset, 0);
+	msleep(1);
+	gpiod_set_value(ctx->reset, 1);
+	msleep(10);
+	gpiod_set_value(ctx->reset, 0);
+	msleep(120);
+
+	ret = ili9806e_configure_registers(ctx);
+	if (ret < 0)
+		return ret;
+
+	ili9806e_switch_page(ctx, 0);
+
+	ret = ili9806e_prepare_backlight(ctx);
+	if (ret < 0) {
+		dev_err(&ctx->dsi->dev, "failed to enable backlight: %d\n", ret);
+	}
+
+	ret = mipi_dsi_dcs_exit_sleep_mode(ctx->dsi);
+	if (ret)
+		return ret;
+
+	msleep(120);
+
+	return 0;
+}
+
+static int ili9806e_enable(struct drm_panel *panel)
+{
+	int ret;
+	struct ili9806e *ctx = panel_to_ili9806e(panel);
+
+	ret = mipi_dsi_dcs_set_display_on(ctx->dsi);
+	if (ret)
+		return ret;
+
+	msleep(20);
+
+	return 0;
+}
+
+static int ili9806e_disable(struct drm_panel *panel)
+{
+	struct ili9806e *ctx = panel_to_ili9806e(panel);
+
+	return mipi_dsi_dcs_set_display_off(ctx->dsi);
+}
+
+static int ili9806e_unprepare(struct drm_panel *panel)
+{
+	struct ili9806e *ctx = panel_to_ili9806e(panel);
+
+	mipi_dsi_dcs_enter_sleep_mode(ctx->dsi);
+	msleep(120);
+
+	regulator_disable(ctx->power);
+	gpiod_set_value(ctx->reset, 1);
+
+	return 0;
+}
+
+static int ili9806e_get_modes(struct drm_panel *panel,
+			      struct drm_connector *connector)
+{
+	struct ili9806e *ctx = panel_to_ili9806e(panel);
+	struct drm_display_mode *mode;
+
+	mode = drm_mode_duplicate(connector->dev, &ctx->desc->mode);
+	if (!mode) {
+		dev_err(&ctx->dsi->dev, "failed to duplicate a display mode\n");
+		return -ENOMEM;
+	}
+	connector->display_info.width_mm = ctx->desc->mode.width_mm;
+	connector->display_info.height_mm = ctx->desc->mode.height_mm;
+	drm_mode_set_name(mode);
+
+	mode->type = DRM_MODE_TYPE_DRIVER | DRM_MODE_TYPE_PREFERRED;
+	drm_mode_probed_add(connector, mode);
+
+	return 1;
+}
+
+static const struct drm_panel_funcs ili9806e_funcs = {
+	.prepare	= ili9806e_prepare,
+	.unprepare	= ili9806e_unprepare,
+	.enable		= ili9806e_enable,
+	.disable	= ili9806e_disable,
+	.get_modes	= ili9806e_get_modes,
+};
+
+static int ili9806e_dsi_probe(struct mipi_dsi_device *dsi)
+{
+	int ret;
+	struct ili9806e *ctx;
+
+	ctx = devm_kzalloc(&dsi->dev, sizeof(*ctx), GFP_KERNEL);
+	if (!ctx)
+		return -ENOMEM;
+	mipi_dsi_set_drvdata(dsi, ctx);
+	ctx->dsi = dsi;
+	ctx->desc = of_device_get_match_data(&dsi->dev);
+	if (!ctx->desc)
+		return -EINVAL;
+
+	drm_panel_init(&ctx->panel, &dsi->dev, &ili9806e_funcs,
+	       DRM_MODE_CONNECTOR_DSI);
+
+	ctx->power = devm_regulator_get(&dsi->dev, "power");
+	if (IS_ERR(ctx->power))
+		return dev_err_probe(&dsi->dev, PTR_ERR(ctx->power),
+				     "Couldn't get MIPI power regulator.\n");
+
+	ctx->reset = devm_gpiod_get(&dsi->dev, "reset", GPIOD_OUT_LOW);
+	if (IS_ERR(ctx->reset))
+		return dev_err_probe(&dsi->dev, PTR_ERR(ctx->reset),
+				    "Couldn't get our reset GPIO.\n");
+
+	drm_panel_of_backlight(&ctx->panel);
+
+	drm_panel_add(&ctx->panel);
+
+	dsi->mode_flags = MIPI_DSI_MODE_VIDEO;
+	dsi->format = MIPI_DSI_FMT_RGB888;
+	dsi->lanes = 2;
+
+	ret = mipi_dsi_attach(dsi);
+	if (ret) {
+		drm_panel_remove(&ctx->panel);
+		if (ret == -EPROBE_DEFER)
+			return ret;
+		return dev_err_probe(&dsi->dev, ret, "failed to attach DSI device\n");
+	}
+
+	return 0;
+}
+
+static int ili9806e_dsi_remove(struct mipi_dsi_device *dsi)
+{
+	struct ili9806e *ctx = mipi_dsi_get_drvdata(dsi);
+
+	mipi_dsi_detach(dsi);
+	drm_panel_remove(&ctx->panel);
+
+	return 0;
+}
+
+static const struct of_device_id ili9806e_of_match[] = {
+	{ .compatible = "tdo,tl040wv27ct3", .data = &tl040wv27ct3_data },
+	{ }
+};
+MODULE_DEVICE_TABLE(of, ili9806e_of_match);
+
+static struct mipi_dsi_driver ili9806e_dsi_driver = {
+	.probe		= ili9806e_dsi_probe,
+	.remove		= ili9806e_dsi_remove,
+	.driver = {
+		.name		= "ili9806e-dsi",
+		.of_match_table	= ili9806e_of_match,
+	},
+};
+module_mipi_dsi_driver(ili9806e_dsi_driver);
+
+MODULE_AUTHOR("Roman Beranek <roman.beranek@prusa3d.com>");
+MODULE_DESCRIPTION("Ilitek ILI9806E Controller Driver");
+MODULE_LICENSE("GPL v2");
-- 
2.34.1

