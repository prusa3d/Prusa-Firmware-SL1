From 4bd8f5c5913220fb2685665644eefc8c8be0f6e3 Mon Sep 17 00:00:00 2001
From: Roman Beranek <roman.beranek@prusa3d.com>
Date: Mon, 29 Mar 2021 06:21:28 +0200
Subject: [PATCH] iio: adc: add mcp3221 driver

---
 drivers/iio/adc/Kconfig           |  10 ++
 drivers/iio/adc/Makefile          |   1 +
 drivers/iio/adc/mcp3221.c         | 151 ++++++++++++++++++++++++++++++
 drivers/iio/multiplexer/iio-mux.c |   4 +-
 4 files changed, 165 insertions(+), 1 deletion(-)
 create mode 100644 drivers/iio/adc/mcp3221.c

diff --git a/drivers/iio/adc/Kconfig b/drivers/iio/adc/Kconfig
index af168e1c9fdb..59580058f625 100644
--- a/drivers/iio/adc/Kconfig
+++ b/drivers/iio/adc/Kconfig
@@ -684,6 +684,16 @@ config MCP320X
 	  This driver can also be built as a module. If so, the module will be
 	  called mcp320x.
 
+config MCP3221
+	tristate "Microchip Technology MCP3221"
+	depends on I2C
+	help
+	  Say yes here to build support for Microchip Technology's
+	  MCP3221 12-bit analog to digital converter.
+
+	  This driver can also be built as a module. If so, the module will be
+	  called mcp3221.
+
 config MCP3422
 	tristate "Microchip Technology MCP3421/2/3/4/5/6/7/8 driver"
 	depends on I2C
diff --git a/drivers/iio/adc/Makefile b/drivers/iio/adc/Makefile
index d68550f493e3..d1c568c4ae8b 100644
--- a/drivers/iio/adc/Makefile
+++ b/drivers/iio/adc/Makefile
@@ -63,6 +63,7 @@ obj-$(CONFIG_MAX1241) += max1241.o
 obj-$(CONFIG_MAX1363) += max1363.o
 obj-$(CONFIG_MAX9611) += max9611.o
 obj-$(CONFIG_MCP320X) += mcp320x.o
+obj-$(CONFIG_MCP3221) += mcp3221.o
 obj-$(CONFIG_MCP3422) += mcp3422.o
 obj-$(CONFIG_MCP3911) += mcp3911.o
 obj-$(CONFIG_MEDIATEK_MT6360_ADC) += mt6360-adc.o
diff --git a/drivers/iio/adc/mcp3221.c b/drivers/iio/adc/mcp3221.c
new file mode 100644
index 000000000000..223fa5955b3f
--- /dev/null
+++ b/drivers/iio/adc/mcp3221.c
@@ -0,0 +1,151 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/*
+ * Driver for Microchip MCP3221 successive approximation 12-bit ADC.
+ *
+ * Copyright (C) 2021 Prusa Development, a.s.
+ * Author: Roman Beranek <roman.beranek@prusa3d.com>
+ */
+
+#include <linux/err.h>
+#include <linux/i2c.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/iio/iio.h>
+#include <linux/iio/sysfs.h>
+
+struct mcp3221_data {
+	struct i2c_client *client;
+	u32 vdd; /* supply and reference voltage in millivolt */
+};
+
+#define MCP3221_VDD_REF_MAX	5500
+#define MCP3221_VDD_REF_MIN	2700
+#define MCP3221_VDD_REF_DEFAULT	3300
+
+/* Read two bytes from the I2C bus to obtain the ADC result */
+static int mcp3221_get_value(struct i2c_client *client)
+{
+	int ret;
+	__be16 buf;
+
+	ret = i2c_master_recv(client, (char *)&buf, sizeof(buf));
+	if (ret < 0)
+		return ret;
+	if (ret != sizeof(buf))
+		return -EIO;
+
+	/* MSB first */
+	return be16_to_cpu(buf);
+}
+
+static int mcp3221_read_raw(struct iio_dev *indio_dev,
+			    struct iio_chan_spec const *chan,
+			    int *val, int *val2, long info)
+{
+	struct mcp3221_data *data = iio_priv(indio_dev);
+	int ret;
+
+	switch (info) {
+	case IIO_CHAN_INFO_RAW:
+		ret = mcp3221_get_value(data->client);
+		if (ret < 0)
+			return ret;
+		*val = ret;
+		return IIO_VAL_INT;
+
+	case IIO_CHAN_INFO_SCALE:
+		*val = data->vdd;
+		*val2 = 16;	/* 16 data bits */
+		return IIO_VAL_FRACTIONAL_LOG2;
+
+	default:
+		return -EINVAL;
+	}
+}
+
+static const struct iio_chan_spec mcp3221_channel[] = {
+	{
+		.type = IIO_VOLTAGE,
+		.info_mask_separate = BIT(IIO_CHAN_INFO_RAW),
+		.info_mask_shared_by_type = BIT(IIO_CHAN_INFO_SCALE),
+	},
+};
+
+static const struct iio_info mcp3221_info = {
+	.read_raw = mcp3221_read_raw,
+};
+
+static int mcp3221_i2c_probe(struct i2c_client *client,
+			     const struct i2c_device_id *id)
+{
+	int ret;
+	struct iio_dev *indio_dev;
+	struct mcp3221_data *data;
+	struct device_node *np = client->dev.of_node;
+
+	if (!i2c_check_functionality(client->adapter, I2C_FUNC_I2C))
+		return -EOPNOTSUPP;
+
+	indio_dev = devm_iio_device_alloc(&client->dev, sizeof(*data));
+	if (!indio_dev)
+		return -ENOMEM;
+
+	data = iio_priv(indio_dev);
+	data->client = client;
+
+	if (np) {
+		if (!of_property_read_u32(np, "reference-voltage-microvolt",
+					  &data->vdd))
+			data->vdd /= 1000;
+		else
+			data->vdd = MCP3221_VDD_REF_DEFAULT;
+	} else {
+		u32 *pdata = dev_get_platdata(&client->dev);
+
+		if (pdata)
+			data->vdd = *pdata;
+		else
+			data->vdd = MCP3221_VDD_REF_DEFAULT;
+	}
+
+	if (data->vdd > MCP3221_VDD_REF_MAX || data->vdd < MCP3221_VDD_REF_MIN)
+		return -EINVAL;
+
+
+	indio_dev->name = id->name;
+	indio_dev->info = &mcp3221_info;
+	indio_dev->modes = INDIO_DIRECT_MODE;
+	indio_dev->channels = mcp3221_channel;
+	indio_dev->num_channels = 1;
+
+	return devm_iio_device_register(&client->dev, indio_dev);
+}
+
+static const struct i2c_device_id mcp3221_i2c_id[] = {
+	{ "mcp3221", 0 },
+	{}
+};
+
+#ifdef CONFIG_OF
+static const struct of_device_id of_mcp3021_match[] = {
+	{ .compatible = "microchip,mcp3221" },
+	{ }
+};
+MODULE_DEVICE_TABLE(of, of_mcp3021_match);
+#endif
+
+MODULE_DEVICE_TABLE(i2c, mcp3221_i2c_id);
+
+static struct i2c_driver mcp3221_i2c_driver = {
+	.driver = {
+		.name = "mcp3221",
+	},
+	.probe    = mcp3221_i2c_probe,
+	.id_table = mcp3221_i2c_id,
+};
+
+module_i2c_driver(mcp3221_i2c_driver);
+
+MODULE_DESCRIPTION("MCP3221 ADC driver");
+MODULE_AUTHOR("Prusa Development");
+MODULE_LICENSE("GPL v2");
diff --git a/drivers/iio/multiplexer/iio-mux.c b/drivers/iio/multiplexer/iio-mux.c
index d54ae5cbe51b..389bc95b0102 100644
--- a/drivers/iio/multiplexer/iio-mux.c
+++ b/drivers/iio/multiplexer/iio-mux.c
@@ -354,9 +354,11 @@ static int mux_probe(struct platform_device *pdev)
 		return -ENODEV;
 
 	parent = devm_iio_channel_get(dev, "parent");
-	if (IS_ERR(parent))
+	if (IS_ERR(parent)) {
+		if (PTR_ERR(parent) == -ENODEV) return -EPROBE_DEFER;
 		return dev_err_probe(dev, PTR_ERR(parent),
 				     "failed to get parent channel\n");
+	}
 
 	sizeof_ext_info = iio_get_channel_ext_info_count(parent);
 	if (sizeof_ext_info) {
-- 
2.34.1

