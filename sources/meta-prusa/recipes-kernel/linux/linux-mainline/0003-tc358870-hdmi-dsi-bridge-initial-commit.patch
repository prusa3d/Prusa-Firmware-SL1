From e8ea408f707888dee9a8215d40b533792758b443 Mon Sep 17 00:00:00 2001
From: Filip Kotoucek <filip.kotoucek@prusa3d.cz>
Date: Tue, 13 Nov 2018 11:38:49 +0100
Subject: [PATCH] tc358870: hdmi->dsi bridge initial commit

---
 drivers/gpu/drm/bridge/Kconfig                |   2 +
 drivers/gpu/drm/bridge/Makefile               |   1 +
 drivers/gpu/drm/bridge/tc358870/Kconfig       |   9 +
 drivers/gpu/drm/bridge/tc358870/Makefile      |   4 +
 .../gpu/drm/bridge/tc358870/tc358870_drv.c    | 313 ++++++++++++++++++
 .../tc358870/tc358870_init_ls055r1sx04.c      | 149 +++++++++
 .../gpu/drm/bridge/tc358870/tc358870_msg.h    |  23 ++
 7 files changed, 501 insertions(+)
 create mode 100644 drivers/gpu/drm/bridge/tc358870/Kconfig
 create mode 100644 drivers/gpu/drm/bridge/tc358870/Makefile
 create mode 100644 drivers/gpu/drm/bridge/tc358870/tc358870_drv.c
 create mode 100644 drivers/gpu/drm/bridge/tc358870/tc358870_init_ls055r1sx04.c
 create mode 100644 drivers/gpu/drm/bridge/tc358870/tc358870_msg.h

diff --git a/drivers/gpu/drm/bridge/Kconfig b/drivers/gpu/drm/bridge/Kconfig
index e4110d6ca7b3..11abaaee1fde 100644
--- a/drivers/gpu/drm/bridge/Kconfig
+++ b/drivers/gpu/drm/bridge/Kconfig
@@ -323,4 +323,6 @@ source "drivers/gpu/drm/bridge/cadence/Kconfig"
 
 source "drivers/gpu/drm/bridge/synopsys/Kconfig"
 
+source "drivers/gpu/drm/bridge/tc358870/Kconfig"
+
 endmenu
diff --git a/drivers/gpu/drm/bridge/Makefile b/drivers/gpu/drm/bridge/Makefile
index 86e7acc76f8d..5b8f276e659d 100644
--- a/drivers/gpu/drm/bridge/Makefile
+++ b/drivers/gpu/drm/bridge/Makefile
@@ -22,6 +22,7 @@ obj-$(CONFIG_DRM_TOSHIBA_TC358764) += tc358764.o
 obj-$(CONFIG_DRM_TOSHIBA_TC358767) += tc358767.o
 obj-$(CONFIG_DRM_TOSHIBA_TC358768) += tc358768.o
 obj-$(CONFIG_DRM_TOSHIBA_TC358775) += tc358775.o
+obj-$(CONFIG_DRM_TOSHIBA_TC358870) += tc358870/
 obj-$(CONFIG_DRM_I2C_ADV7511) += adv7511/
 obj-$(CONFIG_DRM_TI_SN65DSI83) += ti-sn65dsi83.o
 obj-$(CONFIG_DRM_TI_SN65DSI86) += ti-sn65dsi86.o
diff --git a/drivers/gpu/drm/bridge/tc358870/Kconfig b/drivers/gpu/drm/bridge/tc358870/Kconfig
new file mode 100644
index 000000000000..d8afd4334fa8
--- /dev/null
+++ b/drivers/gpu/drm/bridge/tc358870/Kconfig
@@ -0,0 +1,9 @@
+# SPDX-License-Identifier: GPL-2.0-only
+config DRM_TOSHIBA_TC358870
+	tristate "Toshiba TC358870 HDMI->DSI bridge"
+	depends on OF
+	select DRM_KMS_HELPER
+	select REGMAP_I2C
+	select DRM_PANEL
+	help
+	  Toshiba TC358870 HDMI->DSI bridge chip driver.
diff --git a/drivers/gpu/drm/bridge/tc358870/Makefile b/drivers/gpu/drm/bridge/tc358870/Makefile
new file mode 100644
index 000000000000..be0fce06a82f
--- /dev/null
+++ b/drivers/gpu/drm/bridge/tc358870/Makefile
@@ -0,0 +1,4 @@
+# SPDX-License-Identifier: GPL-2.0-only
+tc358870-objs := tc358870_drv.o tc358870_init_ls055r1sx04.o
+CFLAGS_tc358870_init_ls055r1sx04.o += -Wno-missing-braces
+obj-$(CONFIG_DRM_TOSHIBA_TC358870) += tc358870.o
diff --git a/drivers/gpu/drm/bridge/tc358870/tc358870_drv.c b/drivers/gpu/drm/bridge/tc358870/tc358870_drv.c
new file mode 100644
index 000000000000..828ca559ecf2
--- /dev/null
+++ b/drivers/gpu/drm/bridge/tc358870/tc358870_drv.c
@@ -0,0 +1,324 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Copyright (C) 2018, Filip Kotoucek
+ */
+
+#include <linux/delay.h>
+#include <linux/gpio/consumer.h>
+#include <linux/i2c.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/regulator/consumer.h>
+#include <linux/string.h>
+
+#include <drm/drm_bridge.h>
+
+#include "tc358870_msg.h"
+
+#define REG_CHIP_ID		0x00, 0x00
+#define REG_SYS_STATUS		0x85, 0x20
+#define SYS_STATUS_SYNC		0x8F
+
+static const char * const tc358870_supplies[] = {
+	"vdd12_mipi", "vdd11_hdmi", "avdd_lcd", "iovdd_lcd"
+};
+
+struct tc358870 {
+	struct i2c_client *client;
+	struct device *dev;
+
+	struct gpio_desc *tc_reset;
+	struct gpio_desc *lcd_reset;
+
+	struct regulator_bulk_data supplies[ARRAY_SIZE(tc358870_supplies)];
+
+	const struct tc358870_msg *dsi_init_data;
+};
+
+static int i2c_write(struct tc358870 *priv, const u8 *buf, int len)
+{
+	int ret;
+	ret = i2c_master_send(priv->client, buf, len);
+
+	if (ret < 0)
+		dev_err(priv->dev, "I2C write failed with error: %d\n", ret);
+
+	return ret;
+}
+
+
+static int i2c_read(struct tc358870 *priv, char *cmd, char *buf, int len)
+{
+	int ret;
+	struct i2c_msg msg[2] = {
+	    {
+	        .addr = priv->client->addr,
+	        .len = 2,
+	        .buf = cmd,
+	    },
+	    {
+	        .addr = priv->client->addr,
+	        .flags = I2C_M_RD,
+	        .len = len,
+	        .buf = buf,
+	    }
+	};
+
+	ret = i2c_transfer(priv->client->adapter, msg, 2);
+
+	if (ret < 0)
+	    dev_err(priv->dev, "I2C read failed with error: %d\n", ret);
+
+	return ret;
+}
+
+static int tc358870_reset(struct tc358870 *priv, int msec)
+{
+	gpiod_set_value(priv->tc_reset, 1);
+	msleep(msec);
+	gpiod_set_value(priv->tc_reset, 0);
+
+	if (IS_ERR(priv->tc_reset)) {
+		dev_err(priv->dev, "Failed to reset\n");
+		return PTR_ERR(priv->tc_reset);
+	}
+
+	msleep(20);	/* wait to stabilize */
+	return 0;
+}
+
+static int tc358870_wait_for_reg_sys(struct tc358870 *priv, int expected_value)
+{
+	char readbuf = 0;
+	int i, ret;
+
+	/* wait max 1 s to receive expected value form REG_SYS_STATUS */
+	for (i = 10; i > 0; i--)
+	{
+		ret = i2c_read(priv, (char[]) {REG_SYS_STATUS}, &readbuf, 1);
+		if (ret < 0)
+			return ret;
+
+		dev_dbg(priv->dev, "tc358870 REG_SYS_STATUS: 0x%02x\n", readbuf);
+		if ((readbuf & expected_value) == expected_value) return 0;
+
+		msleep(100);
+	}
+
+	dev_err(priv->dev, "tc358870 REG_SYS_STATUS didn't return"
+		" expected value: %x\n", expected_value);
+
+	return -ETIMEDOUT;
+}
+
+static int tc358870_hdmi_init(struct tc358870 *priv)
+{
+	i2c_write(priv, (char[]){0x00, 0x04, 0x04, 0x00}, 4);
+	/* Reset each component */
+	i2c_write(priv, (char[]){0x00, 0x02, 0x01, 0x3f}, 4);
+	fsleep(1000);
+	i2c_write(priv, (char[]){0x00, 0x02, 0x00, 0x00}, 4);
+
+	i2c_write(priv, (char[]){0x00, 0x06, 0x08, 0x00}, 4);	/* Set DSI clock source to Refclk */
+	i2c_write(priv, (char[]){0x84, 0x13, 0x3F}, 3);		/* Wake up PHY */
+	i2c_write(priv, (char[]){0x84, 0xF4, 0x01}, 3);		/* DDCIO_CTL: normal action */
+	i2c_write(priv, (char[]){0x85, 0x40, 0xC0, 0x12}, 4);	/* SYS_FREQ = 0x12C0 = 4800 -> 48 MHz */
+	i2c_write(priv, (char[]){0x8A, 0x0C, 0xC0, 0x12}, 4);	/* SCLK_CSC0 = 0x12C0 = 4800 -> 48 MHz */
+	i2c_write(priv, (char[]){0x00, 0x16, 0xFF, 0x0F}, 4);	/* Disable all interrupts */
+	i2c_write(priv, (char[]){0x85, 0xE0, 0x00}, 3);		/* Disable DDC line */
+	i2c_write(priv, (char[]){0x85, 0x44, 0x01}, 3);		/* HOTPLUG: output H */
+	return i2c_write(priv, (char[]){0x85, 0x4A, 0x01}, 3);	/* INIT_END */
+}
+
+static int tc358870_dsi_init(struct tc358870 *priv)
+{
+	const struct tc358870_msg *p;
+	int ret;
+	u32 delay;
+
+	gpiod_set_value(priv->lcd_reset, 0);
+	fsleep(20);
+
+	for (p = priv->dsi_init_data; p->len != 0; p++)
+	{
+		if (p->len == USLEEP_PAUSE) {
+			delay = *((u32*)p->data);
+			fsleep(delay);
+			continue;
+		}
+		ret = i2c_write(priv, p->data, p->len);
+		if (ret < 0) return ret;
+	}
+
+	ret = tc358870_wait_for_reg_sys(priv, SYS_STATUS_SYNC);
+	if (ret < 0) {
+		return ret;
+	}
+	i2c_write(priv, (char[]){0x00, 0x06, 0x00, 0x00}, 4);
+
+	return 0;
+}
+
+static int tc358870_init(struct tc358870 *priv)
+{
+	int ret;
+	char version[2];
+
+	ret = regulator_bulk_enable(ARRAY_SIZE(priv->supplies), priv->supplies);
+	if (ret < 0)
+		dev_err(priv->dev, "error enabling regulators (%d)\n", ret);
+
+	msleep(100);
+
+	ret = tc358870_reset(priv, 10);
+	if (ret < 0) return ret;
+
+	ret = i2c_read(priv, (char[]) {REG_CHIP_ID}, version, 2);
+	if (ret >= 0)
+		dev_dbg(priv->dev, "REG_CHIP_ID: 0x%02x%02x\n", version[0], version[1]);
+
+	return ret;
+}
+
+enum panel_type {
+	PANEL_TYPE_UNKNOWN,
+	PANEL_TYPE_LS055R1SX04,
+};
+
+static enum panel_type tc358870_get_panel_type(struct device *dev)
+{
+	int ret;
+	static const char *const names[] = {
+		[PANEL_TYPE_UNKNOWN]		= "",
+		[PANEL_TYPE_LS055R1SX04]	= "ls055r1sx04",
+	};
+	const char *panel_name;
+	ret = of_property_read_string(dev->of_node, "panel-name", &panel_name);
+	if (ret < 0) return PANEL_TYPE_UNKNOWN;
+	ret = match_string(names, ARRAY_SIZE(names), panel_name);
+	return (ret < 0) ? PANEL_TYPE_UNKNOWN : ret;
+}
+
+static int tc358870_get_regulators(struct tc358870 *priv)
+{
+	int i, ret;
+
+	for (i = 0; i < ARRAY_SIZE(priv->supplies); ++i)
+		priv->supplies[i].supply = tc358870_supplies[i];
+
+	ret = devm_regulator_bulk_get(priv->dev, ARRAY_SIZE(priv->supplies),
+				      priv->supplies);
+	if (ret < 0)
+		dev_err(priv->dev, "failed to get regulators: %d\n", ret);
+
+	return ret;
+}
+
+static const struct tc358870_msg *tc358870_get_dsi_init_data(struct device *dev)
+{
+	static const struct tc358870_msg *const init_data[] = {
+		[PANEL_TYPE_UNKNOWN]		= NULL,
+		[PANEL_TYPE_LS055R1SX04]	= ls055r1sx04_dsi_init_data,
+	};
+	enum panel_type type = tc358870_get_panel_type(dev);
+	if (type < 0 || type >= ARRAY_SIZE(init_data))
+		return NULL;
+	return init_data[type];
+}
+
+static int tc358870_probe(struct i2c_client *client, const struct i2c_device_id *id)
+{
+	struct tc358870 *priv;
+	struct device_node *np;
+	struct drm_bridge *hdmi_bridge;
+	struct device *dev = &client->dev;
+	int ret;
+
+	np = of_parse_phandle(dev->of_node, "hdmi-bridge", 0);
+	if (!np) return -EINVAL;
+	hdmi_bridge = of_drm_find_bridge(np);
+	of_node_put(np);
+	if (!hdmi_bridge) return -EPROBE_DEFER;
+
+	priv = devm_kzalloc(dev, sizeof(*priv), GFP_KERNEL);
+	if (!priv) return -ENOMEM;
+
+	priv->client = client;
+	priv->dev = dev;
+
+	if (!dev->of_node) {
+		dev_err(dev, "not DT device\n");
+		return -ENODEV;
+	}
+
+	priv->dsi_init_data = tc358870_get_dsi_init_data(dev);
+	if (!priv->dsi_init_data) {
+		dev_err(dev, "Invalid or missing 'panel-name' property\n");
+		return -EINVAL;
+	}
+
+	ret = tc358870_get_regulators(priv);
+	if (ret)
+		return ret;
+
+	priv->tc_reset = devm_gpiod_get(dev, "tc358870-reset", GPIOD_OUT_HIGH);
+	if (IS_ERR(priv->tc_reset)) {
+		dev_err(dev, "Failed to find TC358870 reset gpio\n");
+		return PTR_ERR(priv->tc_reset);
+	}
+
+	priv->lcd_reset = devm_gpiod_get(dev, "lcd-reset", GPIOD_OUT_HIGH);
+	if (IS_ERR(priv->lcd_reset)) {
+		dev_err(dev, "Failed to find LCD reset gpio\n");
+		return PTR_ERR(priv->lcd_reset);
+	}
+
+	ret = tc358870_init(priv);
+	if (ret < 0)
+		return ret;
+
+	ret = tc358870_hdmi_init(priv);
+	if (ret < 0)
+		return ret;
+
+	ret = tc358870_dsi_init(priv);
+	if (ret < 0)
+		return ret;
+
+	i2c_set_clientdata(client, priv);
+
+	return ret;
+}
+
+static int tc358870_remove(struct i2c_client *client)
+{
+	return 0;
+}
+
+static const struct of_device_id tc358870_dt_match[] = {
+	{ .compatible = "toshiba,tc358870" },
+	{ },
+};
+MODULE_DEVICE_TABLE(of, tc358870_dt_match);
+
+static const struct i2c_device_id tc358870_id[] = {
+	{ "tc358870", 0 },
+	{ },
+};
+MODULE_DEVICE_TABLE(i2c, tc358870_id);
+
+static struct i2c_driver tc358870_driver = {
+	.driver = {
+		.name	= "tc358870",
+		.of_match_table = tc358870_dt_match,
+	},
+	.probe = tc358870_probe,
+	.remove = tc358870_remove,
+	.id_table = tc358870_id,
+};
+
+module_i2c_driver(tc358870_driver);
+
+MODULE_DESCRIPTION("Toshiba TC358870XBG HDMI-DSI converter configuration driver");
+MODULE_AUTHOR("Prusa Research <info@prusa3d.cz>");
+MODULE_LICENSE("GPL");
diff --git a/drivers/gpu/drm/bridge/tc358870/tc358870_init_ls055r1sx04.c b/drivers/gpu/drm/bridge/tc358870/tc358870_init_ls055r1sx04.c
new file mode 100644
index 000000000000..df21d3a8032a
--- /dev/null
+++ b/drivers/gpu/drm/bridge/tc358870/tc358870_init_ls055r1sx04.c
@@ -0,0 +1,149 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Copyright (C) 2020, Prusa Development, a.s.
+ * Written by Roman Beranek <roman.beranek@prusa3d.com>
+ */
+
+#include "tc358870_msg.h"
+
+const struct tc358870_msg ls055r1sx04_dsi_init_data[] = {
+	{{0x00, 0x04, 0x04, 0x00}, 4},
+	{{0x00, 0x02, 0x00, 0x12}, 4},
+
+	USLEEP(1000),
+
+	{{0x00, 0x02, 0x00, 0x00}, 4},
+	{{0x00, 0x06, 0x08, 0x00}, 4},
+	{{0x01, 0x08, 0x01, 0x00, 0x00, 0x00}, 6},
+	{{0x01, 0x0C, 0x01, 0x00, 0x00, 0x00}, 6},
+	{{0x02, 0xA0, 0x01, 0x00, 0x00, 0x00}, 6},
+	{{0x02, 0xAC, 0xD0, 0x94, 0x00, 0x00}, 6},
+
+	USLEEP(1500),
+
+	{{0x02, 0xA0, 0x03, 0x00, 0x00, 0x00}, 6},
+	{{0x01, 0x18, 0x14, 0x00, 0x00, 0x00}, 6},
+	{{0x01, 0x20, 0x05, 0x12, 0x00, 0x00}, 6},
+	{{0x01, 0x24, 0x00, 0x00, 0x00, 0x00}, 6},
+	{{0x01, 0x28, 0x01, 0x01, 0x00, 0x00}, 6},
+	{{0x01, 0x30, 0x00, 0x00, 0x01, 0x00}, 6},
+	{{0x01, 0x34, 0x00, 0x50, 0x00, 0x00}, 6},
+	{{0x01, 0x38, 0x00, 0x00, 0x01, 0x00}, 6},
+	{{0x01, 0x3C, 0x00, 0x00, 0x01, 0x00}, 6},
+	{{0x01, 0x40, 0x00, 0x00, 0x01, 0x00}, 6},
+	{{0x01, 0x44, 0x00, 0x00, 0x01, 0x00}, 6},
+	{{0x01, 0x48, 0x00, 0x10, 0x00, 0x00}, 6},
+	{{0x01, 0x4C, 0x00, 0x00, 0x01, 0x00}, 6},
+	{{0x01, 0x50, 0x61, 0x01, 0x00, 0x00}, 6},
+	{{0x01, 0x54, 0x01, 0x00, 0x00, 0x00}, 6},
+	{{0x01, 0x58, 0xC8, 0x00, 0x00, 0x00}, 6},
+	{{0x01, 0x68, 0x2A, 0x00, 0x00, 0x00}, 6},
+	{{0x01, 0x70, 0x7C, 0x02, 0x00, 0x00}, 6},
+	{{0x01, 0x7C, 0x81, 0x00, 0x00, 0x00}, 6},
+	{{0x01, 0x8C, 0x3A, 0x00, 0x00, 0x00}, 6},
+	{{0x01, 0x90, 0x84, 0x00, 0x00, 0x00}, 6},
+	{{0x01, 0xA4, 0x00, 0x00, 0x00, 0x00}, 6},
+	{{0x01, 0xC0, 0x15, 0x00, 0x00, 0x00}, 6},
+	{{0x02, 0x14, 0x00, 0x00, 0x00, 0x00}, 6},
+	{{0x02, 0x1C, 0x80, 0x00, 0x00, 0x00}, 6},
+	{{0x02, 0x24, 0x00, 0x00, 0x00, 0x00}, 6},
+	{{0x02, 0x54, 0x04, 0x00, 0x00, 0x00}, 6},
+	{{0x02, 0x58, 0x04, 0x02, 0x1E, 0x00}, 6},
+	{{0x02, 0x5C, 0x08, 0x00, 0x0A, 0x00}, 6},
+	{{0x02, 0x60, 0x06, 0x00, 0x0E, 0x00}, 6},
+	{{0x02, 0x64, 0x15, 0x48, 0x00, 0x00}, 6},
+	{{0x02, 0x68, 0x0C, 0x00, 0x00, 0x00}, 6},
+	{{0x02, 0x6C, 0x07, 0x00, 0x0A, 0x00}, 6},
+	{{0x02, 0x70, 0x20, 0x00, 0x00, 0x00}, 6},
+	{{0x02, 0x74, 0x1F, 0x00, 0x00, 0x00}, 6},
+	{{0x02, 0x78, 0x05, 0x00, 0x04, 0x00}, 6},
+	{{0x02, 0x7C, 0x02, 0x00, 0x00, 0x00}, 6},
+	{{0x02, 0x88, 0xAA, 0x02, 0x00, 0x00}, 6},
+	{{0x01, 0x1C, 0x01, 0x00, 0x00, 0x00}, 6},
+	{{0x03, 0x08, 0x01, 0x00, 0x00, 0x00}, 6},
+	{{0x03, 0x0C, 0x01, 0x00, 0x00, 0x00}, 6},
+	{{0x04, 0xA0, 0x01, 0x00, 0x00, 0x00}, 6},
+	{{0x04, 0xAC, 0xD0, 0x94, 0x00, 0x00}, 6},
+
+	USLEEP(1500),
+
+	{{0x04, 0xA0, 0x03, 0x00, 0x00, 0x00}, 6},
+	{{0x03, 0x18, 0x14, 0x00, 0x00, 0x00}, 6},
+	{{0x03, 0x20, 0x05, 0x12, 0x00, 0x00}, 6},
+	{{0x03, 0x24, 0x00, 0x00, 0x00, 0x00}, 6},
+	{{0x03, 0x28, 0x01, 0x01, 0x00, 0x00}, 6},
+	{{0x03, 0x30, 0x00, 0x00, 0x01, 0x00}, 6},
+	{{0x03, 0x34, 0x00, 0x50, 0x00, 0x00}, 6},
+	{{0x03, 0x38, 0x00, 0x00, 0x01, 0x00}, 6},
+	{{0x03, 0x3C, 0x00, 0x00, 0x01, 0x00}, 6},
+	{{0x03, 0x40, 0x00, 0x00, 0x01, 0x00}, 6},
+	{{0x03, 0x44, 0x00, 0x00, 0x01, 0x00}, 6},
+	{{0x03, 0x48, 0x00, 0x10, 0x00, 0x00}, 6},
+	{{0x03, 0x4C, 0x00, 0x00, 0x01, 0x00}, 6},
+	{{0x03, 0x50, 0x61, 0x01, 0x00, 0x00}, 6},
+	{{0x03, 0x54, 0x01, 0x00, 0x00, 0x00}, 6},
+	{{0x03, 0x58, 0xC8, 0x00, 0x00, 0x00}, 6},
+	{{0x03, 0x68, 0x2A, 0x00, 0x00, 0x00}, 6},
+	{{0x03, 0x70, 0x7C, 0x02, 0x00, 0x00}, 6},
+	{{0x03, 0x7C, 0x81, 0x00, 0x00, 0x00}, 6},
+	{{0x03, 0x8C, 0x3A, 0x00, 0x00, 0x00}, 6},
+	{{0x03, 0x90, 0x84, 0x00, 0x00, 0x00}, 6},
+	{{0x03, 0xA4, 0x00, 0x00, 0x00, 0x00}, 6},
+	{{0x03, 0xC0, 0x15, 0x00, 0x00, 0x00}, 6},
+	{{0x04, 0x14, 0x00, 0x00, 0x00, 0x00}, 6},
+	{{0x04, 0x1C, 0x80, 0x00, 0x00, 0x00}, 6},
+	{{0x04, 0x24, 0x00, 0x00, 0x00, 0x00}, 6},
+	{{0x04, 0x54, 0x04, 0x00, 0x00, 0x00}, 6},
+	{{0x04, 0x58, 0x04, 0x02, 0x1E, 0x00}, 6},
+	{{0x04, 0x5C, 0x08, 0x00, 0x0A, 0x00}, 6},
+	{{0x04, 0x60, 0x06, 0x00, 0x0E, 0x00}, 6},
+	{{0x04, 0x64, 0x15, 0x48, 0x00, 0x00}, 6},
+	{{0x04, 0x68, 0x0C, 0x00, 0x00, 0x00}, 6},
+	{{0x04, 0x6C, 0x07, 0x00, 0x0A, 0x00}, 6},
+	{{0x04, 0x70, 0x20, 0x00, 0x00, 0x00}, 6},
+	{{0x04, 0x74, 0x1F, 0x00, 0x00, 0x00}, 6},
+	{{0x04, 0x78, 0x05, 0x00, 0x04, 0x00}, 6},
+	{{0x04, 0x7C, 0x02, 0x00, 0x00, 0x00}, 6},
+	{{0x04, 0x88, 0xAA, 0x02, 0x00, 0x00}, 6},
+	{{0x03, 0x1C, 0x01, 0x00, 0x00, 0x00}, 6},
+	{{0x01, 0x10, 0x16, 0x00, 0x00, 0x00}, 6},
+	{{0x03, 0x10, 0x16, 0x00, 0x00, 0x00}, 6},
+
+	USLEEP(1000),
+
+	{{0x05, 0x00, 0x04, 0x00}, 4},
+	{{0x05, 0x04, 0x05, 0x00}, 4},
+	{{0x05, 0x04, 0x11, 0x00}, 4},
+	{{0x05, 0x04, 0x05, 0x00}, 4},
+	{{0x05, 0x04, 0x00, 0x00}, 4},
+
+	USLEEP(300000),
+
+	{{0x05, 0x04, 0x23, 0x00}, 4},
+	{{0x05, 0x04, 0xB0, 0x04}, 4},
+	{{0x05, 0x04, 0x23, 0x00}, 4},
+	{{0x05, 0x04, 0xB3, 0x10}, 4},
+	{{0x05, 0x04, 0x23, 0x00}, 4},
+	{{0x05, 0x04, 0xB0, 0x03}, 4},
+	{{0x05, 0x04, 0x15, 0x00}, 4},
+	{{0x05, 0x04, 0x36, 0x00}, 4},
+	{{0x05, 0x04, 0x15, 0x00}, 4},
+	{{0x05, 0x04, 0x3A, 0x77}, 4},
+	{{0x05, 0x04, 0x05, 0x00}, 4},
+	{{0x05, 0x04, 0x29, 0x00}, 4},
+	{{0x05, 0x04, 0x05, 0x00}, 4},
+	{{0x05, 0x04, 0x00, 0x00}, 4},
+
+	USLEEP(30000),
+
+	{{0x50, 0x00, 0x00, 0x00}, 4},
+	{{0x50, 0x08, 0x70, 0x08}, 4},
+	{{0x50, 0x0C, 0x00, 0x80}, 4},
+	{{0x50, 0x80, 0x00, 0x00}, 4},
+	{{0x50, 0x88, 0x70, 0x08}, 4},
+	{{0x00, 0x04, 0x37, 0x0C}, 4},
+	{{0x00, 0x06, 0x00, 0x00}, 4},
+	{{0x01, 0x10, 0x06, 0x00, 0x00, 0x00}, 6},
+	{{0x03, 0x10, 0x06, 0x00, 0x00, 0x00}, 6},
+	INIT_END,
+};
diff --git a/drivers/gpu/drm/bridge/tc358870/tc358870_msg.h b/drivers/gpu/drm/bridge/tc358870/tc358870_msg.h
new file mode 100644
index 000000000000..30d614603d31
--- /dev/null
+++ b/drivers/gpu/drm/bridge/tc358870/tc358870_msg.h
@@ -0,0 +1,23 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Copyright (C) 2020, Prusa Development, a.s.
+ * Written by Roman Beranek <roman.beranek@prusa3d.com>
+ */
+
+/* pause communication usleep_range(x, x + 1000) */
+#define USLEEP_PAUSE	0xFFU
+#define INIT_END	0x00U
+#define USLEEP(x)	{{ \
+				((unsigned char)(x >> 0x00u)) & 0xffu, \
+				((unsigned char)(x >> 0x08u)) & 0xffu, \
+				((unsigned char)(x >> 0x10u)) & 0xffu, \
+				((unsigned char)(x >> 0x18u)) & 0xffu, \
+			}, USLEEP_PAUSE}
+
+struct tc358870_msg
+{
+	unsigned char data[7];
+	unsigned char len;
+};
+
+extern const struct tc358870_msg ls055r1sx04_dsi_init_data[];
-- 
2.32.0

